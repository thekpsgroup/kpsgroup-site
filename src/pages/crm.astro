---
// CRM Admin Page - Complete Customer Relationship Management System
import BaseLayout from '../layouts/BaseLayout.astro';
import CrmDashboard from '../components/CrmDashboard.astro';

const pageTitle = 'KPS CRM - Customer Relationship Management';
const pageDescription = 'Complete CRM system for managing leads, clients, pricing, and revenue tracking with Outlook integration.';

// Enhanced security authentication
const password = Astro.url.searchParams.get('password');
const sessionToken = Astro.cookies.get('crm_session')?.value;
const userAgent = Astro.request.headers.get('user-agent') || '';
const clientIP = Astro.clientAddress;

// Security configuration
const CORRECT_PASSWORD = 'kpsadmin';
const SESSION_DURATION = 8 * 60 * 60 * 1000; // 8 hours instead of 30 minutes
const MAX_LOGIN_ATTEMPTS = 3;
const LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes

// Security logging function
const logSecurityEvent = (event: string, details: any = {}) => {
  const logEntry = {
    timestamp: new Date().toISOString(),
    event,
    ip: clientIP,
    userAgent: userAgent.substring(0, 100), // Truncate for security
    ...details
  };
  
  // In production, send to secure logging service
  console.log('[SECURITY]', JSON.stringify(logEntry));
};

// Rate limiting and attempt tracking (in production, use Redis or database)
const loginAttempts = new Map();
const lockedIPs = new Map();

// Check if IP is locked out
const isLockedOut = () => {
  const lockoutInfo = lockedIPs.get(clientIP);
  if (lockoutInfo && Date.now() < lockoutInfo.until) {
    return true;
  }
  if (lockoutInfo && Date.now() >= lockoutInfo.until) {
    lockedIPs.delete(clientIP);
  }
  return false;
};

// Validate session token
const isValidSession = () => {
  if (!sessionToken) return false;
  
  try {
    const sessionData = JSON.parse(atob(sessionToken));
    const isExpired = Date.now() > sessionData.expires;
    const isValidUA = sessionData.userAgent === userAgent;
    const isValidIP = sessionData.ip === clientIP;
    
    // Additional security checks
    const sessionAge = Date.now() - sessionData.created;
    const maxSessionAge = 8 * 60 * 60 * 1000; // 8 hours absolute max
    const isTooOld = sessionAge > maxSessionAge;
    
    if (isExpired || !isValidUA || !isValidIP || isTooOld) {
      if (isExpired) logSecurityEvent('SESSION_EXPIRED');
      if (!isValidUA) logSecurityEvent('SESSION_UA_MISMATCH');
      if (!isValidIP) logSecurityEvent('SESSION_IP_MISMATCH');
      if (isTooOld) logSecurityEvent('SESSION_TOO_OLD');
      return false;
    }
    
    return true;
  } catch {
    logSecurityEvent('SESSION_INVALID_FORMAT');
    return false;
  }
};

// Check authentication
let isAuthenticated = isValidSession();

// Handle password authentication (both GET and POST)
if (!isAuthenticated && (password || Astro.request.method === 'POST')) {
  let submittedPassword = password;
  
  // Handle POST request
  if (Astro.request.method === 'POST') {
    try {
      const formData = await Astro.request.formData();
      const passwordValue = formData.get('password');
      submittedPassword = passwordValue ? passwordValue.toString() : null;
    } catch (error) {
      console.error('Error processing form data:', error);
    }
  }
  
  if (submittedPassword) {
    if (isLockedOut()) {
      const lockoutInfo = lockedIPs.get(clientIP);
      const remainingTime = Math.ceil((lockoutInfo.until - Date.now()) / 1000 / 60);
      
      return new Response(`<!DOCTYPE html>
<html><head><title>Access Blocked</title><style>
body{font-family:sans-serif;text-align:center;padding:50px;background:#f5f5f5;}
.error{background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);max-width:400px;margin:0 auto;}
.error h2{color:#dc2626;margin:0 0 15px;}
.error p{color:#6b7280;margin:10px 0;}
</style></head><body>
<div class="error">
<h2>üîí Access Blocked</h2>
<p>Too many failed login attempts.</p>
<p>Try again in ${remainingTime} minutes.</p>
</div></body></html>`, {
        status: 429,
        headers: { 'Content-Type': 'text/html' }
      });
    }
    
    if (submittedPassword === CORRECT_PASSWORD) {
      // Successful login - create session
      const sessionData = {
        created: Date.now(),
        expires: Date.now() + SESSION_DURATION,
        userAgent: userAgent,
        ip: clientIP
      };
      
      const sessionToken = btoa(JSON.stringify(sessionData));
      
      Astro.cookies.set('crm_session', sessionToken, {
        httpOnly: true,
        secure: true,
        sameSite: 'strict',
        maxAge: SESSION_DURATION / 1000,
        path: '/crm'
      });
      
      // Log successful login
      logSecurityEvent('LOGIN_SUCCESS', {
        sessionId: sessionToken.substring(0, 8) + '...'
      });
      
      // Clear failed attempts
      loginAttempts.delete(clientIP);
      isAuthenticated = true;
    } else {
      // Failed login attempt
      const attempts = loginAttempts.get(clientIP) || 0;
      const newAttempts = attempts + 1;
      loginAttempts.set(clientIP, newAttempts);
      
      // Log failed attempt
      logSecurityEvent('LOGIN_FAILED', {
        attempts: newAttempts,
        passwordLength: submittedPassword.length
      });
      
      if (newAttempts >= MAX_LOGIN_ATTEMPTS) {
        lockedIPs.set(clientIP, {
          until: Date.now() + LOCKOUT_DURATION,
          attempts: newAttempts
        });
        
        // Log lockout event
        logSecurityEvent('ACCOUNT_LOCKED', {
          totalAttempts: newAttempts,
          lockoutDuration: LOCKOUT_DURATION / 1000 / 60 // minutes
        });
      }
    
    const remainingAttempts = Math.max(0, MAX_LOGIN_ATTEMPTS - newAttempts);
    
    return new Response(`<!DOCTYPE html>
<html><head><title>Invalid Password</title><style>
body{font-family:sans-serif;text-align:center;padding:50px;background:#f5f5f5;}
.error{background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);max-width:400px;margin:0 auto;}
.error h2{color:#dc2626;margin:0 0 15px;}
.error p{color:#6b7280;margin:10px 0;}
.back-btn{display:inline-block;margin-top:20px;padding:10px 20px;background:#3b82f6;color:white;text-decoration:none;border-radius:5px;}
</style></head><body>
<div class="error">
<h2>‚ùå Invalid Password</h2>
<p>${remainingAttempts > 0 ? remainingAttempts + ' attempts remaining' : 'Account temporarily locked'}</p>
<a href="/crm" class="back-btn">Try Again</a>
</div></body></html>`, {
        status: 401,
        headers: { 'Content-Type': 'text/html' }
      });
    }
  }
}// If not authenticated, return the login page
if (!isAuthenticated) {
  return new Response(`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>KPS CRM - Admin Access</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #000000;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    /* Animated background elements */
    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                  radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.15) 0%, transparent 50%),
                  radial-gradient(circle at 40% 40%, rgba(120, 200, 255, 0.2) 0%, transparent 50%);
      animation: float 20s ease-in-out infinite;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      33% { transform: translateY(-20px) rotate(1deg); }
      66% { transform: translateY(10px) rotate(-1deg); }
    }

    .login-container {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      padding: 3rem;
      border-radius: 24px;
      width: 100%;
      max-width: 400px;
      text-align: center;
      position: relative;
      z-index: 1;
      box-shadow: 
        0 25px 50px rgba(0, 0, 0, 0.5),
        0 0 0 1px rgba(255, 255, 255, 0.05),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    .login-container::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, 
        rgba(120, 119, 198, 0.5), 
        rgba(255, 119, 198, 0.3), 
        rgba(120, 200, 255, 0.4));
      border-radius: 24px;
      z-index: -1;
      opacity: 0.6;
      filter: blur(1px);
    }

    .login-header {
      margin-bottom: 2.5rem;
    }

    .login-title {
      color: #ffffff;
      font-size: 2.2rem;
      font-weight: 700;
      margin: 0 0 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
      text-shadow: 0 2px 20px rgba(255, 255, 255, 0.3);
    }

    .login-title i {
      color: #7877c6;
      filter: drop-shadow(0 0 10px rgba(120, 119, 198, 0.8));
    }

    .login-subtitle {
      color: rgba(255, 255, 255, 0.7);
      margin: 0;
      font-size: 1rem;
      font-weight: 300;
    }

    .login-form {
      margin-bottom: 2rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
      text-align: left;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      color: rgba(255, 255, 255, 0.9);
      font-weight: 500;
      font-size: 0.9rem;
    }

    .form-group input {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      box-sizing: border-box;
      background: rgba(255, 255, 255, 0.05);
      color: #ffffff;
      backdrop-filter: blur(10px);
    }

    .form-group input::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    .form-group input:focus {
      outline: none;
      border-color: rgba(120, 119, 198, 0.6);
      box-shadow: 
        0 0 0 3px rgba(120, 119, 198, 0.2),
        0 0 20px rgba(120, 119, 198, 0.3);
      background: rgba(255, 255, 255, 0.08);
    }

    .login-button {
      width: 100%;
      background: linear-gradient(135deg, rgba(120, 119, 198, 0.8) 0%, rgba(120, 200, 255, 0.6) 100%);
      color: white;
      border: none;
      padding: 1rem;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .login-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .login-button:hover::before {
      left: 100%;
    }

    .login-button:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 10px 25px rgba(120, 119, 198, 0.4),
        0 0 30px rgba(120, 200, 255, 0.3);
      background: linear-gradient(135deg, rgba(120, 119, 198, 0.9) 0%, rgba(120, 200, 255, 0.7) 100%);
    }

    .login-button:active {
      transform: translateY(0);
    }

    .login-button i {
      margin-right: 0.5rem;
    }
  </style>
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-header">
      <h1 class="login-title">
        <i class="fas fa-users"></i>
        KPS CRM
      </h1>
      <p class="login-subtitle">
        Customer Relationship Management System
      </p>
    </div>

    <form class="login-form" method="POST" action="/crm">
      <div class="form-group">
        <label for="password">Admin Password:</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required 
          placeholder="Enter admin password"
          autocomplete="current-password"
          minlength="8"
        />
      </div>
      <button type="submit" class="login-button">
        <i class="fas fa-sign-in-alt"></i>
        Access CRM Dashboard
      </button>
    </form>


  </div>

  <script>
    // Auto-focus password field
    const passwordField = document.getElementById('password');
    if (passwordField) {
      passwordField.focus();
    }
    
    // Handle form submission
    const loginForm = document.querySelector('.login-form');
    if (loginForm) {
      loginForm.addEventListener('submit', function(e) {
        const passwordElement = document.getElementById('password');
        if (passwordElement) {
          const password = passwordElement.value;
          if (!password.trim()) {
            e.preventDefault();
            alert('Please enter the admin password');
            return;
          }
        }
      });
    }
  </script>
</body>
</html>`, {
    headers: {
      'Content-Type': 'text/html'
    }
  });
}
---

<!-- CRM Dashboard (authenticated users only) -->
<BaseLayout title={pageTitle} description={pageDescription}>
  <!-- Session Security Header -->
  <div class="session-header">
    <div class="session-info">
      <span class="session-status">üîí Secure Session Active</span>
      <span class="session-details">Session expires in <span id="sessionTimer">8:00:00</span></span>
    </div>
    <div class="session-actions">
      <button id="logoutBtn" class="btn btn-secondary">
        <i class="fas fa-sign-out-alt"></i>
        Logout
      </button>
    </div>
  </div>
  
  <!-- CRM Dashboard -->
  <CrmDashboard />
  
  <!-- Additional CRM-specific styles -->
  <style>
    /* Session Security Header */
    .session-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 100%);
      color: white;
      padding: 1rem 2rem;
      margin: -2rem -2rem 2rem -2rem;
      border-radius: 0 0 12px 12px;
    }

    .session-info {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .session-status {
      font-weight: 600;
      font-size: 0.9rem;
    }

    .session-details {
      font-size: 0.8rem;
      opacity: 0.9;
    }

    #sessionTimer {
      font-weight: 600;
      color: #fbbf24;
    }

    .session-actions {
      display: flex;
      gap: 1rem;
    }

    /* Notification styles for CRM actions */
    .notification {
      position: fixed;
      top: 2rem;
      right: 2rem;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 9999;
      animation: slideIn 0.3s ease-out;
    }

    .notification-success {
      background: #10b981;
    }

    .notification-error {
      background: #ef4444;
    }

    .notification-info {
      background: #3b82f6;
    }

    .notification-warning {
      background: #f59e0b;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateX(100%);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    /* Enhanced form styles for modals */
    .email-form,
    .convert-form {
      max-width: 500px;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      color: #374151;
      font-weight: 500;
      font-size: 0.875rem;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid #e5e7eb;
      border-radius: 6px;
      font-size: 0.875rem;
      transition: border-color 0.2s;
      box-sizing: border-box;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-group select[multiple] {
      min-height: 100px;
    }

    .form-group textarea {
      resize: vertical;
      min-height: 100px;
    }

    .form-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #e5e7eb;
    }

    /* Enhanced button states */
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .btn:disabled:hover {
      transform: none;
    }

    /* Loading states */
    .btn.loading {
      position: relative;
      color: transparent;
    }

    .btn.loading::after {
      content: '';
      position: absolute;
      width: 16px;
      height: 16px;
      top: 50%;
      left: 50%;
      margin-left: -8px;
      margin-top: -8px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Enhanced table responsiveness */
    @media (max-width: 768px) {
      .leads-table-container {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
      }

      .leads-table {
        min-width: 800px;
      }

      .clients-grid {
        grid-template-columns: 1fr;
      }

      .actions-grid {
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      }
    }

    /* Print styles for reports */
    @media print {
      .card-actions,
      .header-actions,
      .lead-actions,
      .followup-actions,
      .rule-actions,
      .quick-actions-panel {
        display: none !important;
      }

      .dashboard-card {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #e5e7eb;
      }

      .kps-crm-dashboard {
        background: white;
        padding: 1rem;
      }
    }

    /* Dark mode support (optional) */
    @media (prefers-color-scheme: dark) {
      .kps-crm-dashboard {
        background: #111827;
        color: #f9fafb;
      }

      .dashboard-card,
      .kpi-card {
        background: #1f2937;
        border-color: #374151;
      }

      .card-header {
        border-color: #374151;
      }

      .leads-table th {
        background: #374151;
        color: #f9fafb;
      }

      .leads-table td {
        border-color: #374151;
      }

      .lead-row:hover {
        background: #374151;
      }
    }
  </style>

  <!-- CRM JavaScript functionality -->
  <script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      // Session Management
      let sessionTimeLeft = 8 * 60 * 60; // 8 hours in seconds
      const sessionTimer = document.getElementById('sessionTimer');
      const logoutBtn = document.getElementById('logoutBtn');
      
      // Update session timer
      function updateSessionTimer() {
        const hours = Math.floor(sessionTimeLeft / 3600);
        const minutes = Math.floor((sessionTimeLeft % 3600) / 60);
        const seconds = sessionTimeLeft % 60;
        const timeString = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        if (sessionTimer) {
          sessionTimer.textContent = timeString;
          
          // Warning when less than 30 minutes
          if (sessionTimeLeft <= 1800) {
            sessionTimer.style.color = '#ef4444';
            sessionTimer.parentElement.style.animation = 'pulse 2s infinite';
          }
          
          // Auto-logout when expired
          if (sessionTimeLeft <= 0) {
            handleLogout();
            return;
          }
        }
        
        sessionTimeLeft--;
      }
      
      // Start session timer
      const timerInterval = setInterval(updateSessionTimer, 1000);
      
      // Logout functionality
      function handleLogout() {
        clearInterval(timerInterval);
        
        // Clear session cookie
        document.cookie = 'crm_session=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/crm; secure; samesite=strict';
        
        // Show logout message and redirect
        const overlay = document.createElement('div');
        overlay.style.cssText = `
          position: fixed; top: 0; left: 0; right: 0; bottom: 0;
          background: rgba(0,0,0,0.8); z-index: 10000;
          display: flex; align-items: center; justify-content: center;
        `;
        
        overlay.innerHTML = `
          <div style="background: white; padding: 2rem; border-radius: 12px; text-align: center; max-width: 400px;">
            <h3 style="margin: 0 0 1rem; color: #1f2937;">Session Ended</h3>
            <p style="margin: 0 0 1.5rem; color: #6b7280;">You have been logged out for security.</p>
            <button onclick="window.location.href='/crm'" style="
              background: #3b82f6; color: white; border: none; padding: 0.75rem 1.5rem;
              border-radius: 6px; cursor: pointer; font-weight: 600;
            ">Return to Login</button>
          </div>
        `;
        
        document.body.appendChild(overlay);
        
        // Auto-redirect after 3 seconds
        setTimeout(() => {
          window.location.href = '/crm';
        }, 3000);
      }
      
      // Logout button click
      if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
      }
      
      // Session activity detection (extend session on activity)
      let lastActivity = Date.now();
      const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];
      
      function resetSessionTimer() {
        const now = Date.now();
        if (now - lastActivity > 60000) { // Only reset if inactive for 1+ minutes
          sessionTimeLeft = Math.min(sessionTimeLeft + 1800, 8 * 60 * 60); // Add 30 minutes, max 8 hours
          lastActivity = now;
        }
      }
      
      activityEvents.forEach(event => {
        document.addEventListener(event, resetSessionTimer, true);
      });
      
      // Prevent session hijacking - check if page is visible
      document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
          // Page is hidden, could be suspicious
          console.log('Session monitoring: Page hidden');
        }
      });
      
      // Add search functionality
      const headerActions = document.querySelector('.header-actions');
      if (headerActions) {
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = 'Search leads, clients, or services...';
        searchInput.className = 'search-input';
        searchInput.style.cssText = `
          padding: 0.5rem 1rem;
          border: 2px solid #e5e7eb;
          border-radius: 6px;
          margin-right: 1rem;
          min-width: 200px;
        `;
        
        searchInput.addEventListener('input', function(e) {
          var query = e.target.value.toLowerCase();
          var rows = document.querySelectorAll('.lead-row');
          for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var text = row.textContent || '';
            row.style.display = text.toLowerCase().includes(query) ? '' : 'none';
          }
        });
        
        headerActions.insertBefore(searchInput, headerActions.firstChild);
      }
    });
  </script>
</BaseLayout>
