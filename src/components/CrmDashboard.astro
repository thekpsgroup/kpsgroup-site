---
// CRM Dashboard Component - Extended analytics with CRM functionality
interface Lead {
  id: number;
  name: string;
  email: string;
  phone: string;
  service: string;
  status: string;
  value: number;
  timestamp: string;
  city: string;
  nextFollowUp?: string;
  notes?: Array<{id: number, text: string, timestamp: string}>;
}

interface Client {
  id: number;
  name: string;
  email: string;
  phone: string;
  totalValue: number;
  status: string;
  joinedAt: string;
}

interface Deal {
  id: number;
  amount: number;
  services: string[];
  status: string;
  closedAt: string;
}

interface FollowUp {
  id: number;
  leadId: number;
  type: string;
  scheduledFor: string;
  status: string;
  notes: string;
}

const { className = '', dashboardId = 'crm-dashboard' } = Astro.props;

// Load CRM data from API
let crmData: {
  leads: Lead[];
  clients: Client[];
  deals: Deal[];
  followUps: FollowUp[];
  pendingFollowUps?: FollowUp[];
  pricingRules: any[];
  kpis: {
    totalLeads: number;
    totalConversions: number;
    conversionRate: number;
    totalRevenue: number;
    activeClients: number;
    avgDealSize: number;
    monthlyGrowth: number;
  };
} = {
  leads: [],
  clients: [],
  deals: [],
  followUps: [],
  pendingFollowUps: [],
  pricingRules: [],
  kpis: {
    totalLeads: 0,
    totalConversions: 0,
    conversionRate: 0,
    totalRevenue: 0,
    activeClients: 0,
    avgDealSize: 0,
    monthlyGrowth: 0
  }
};

try {
  const response = await fetch('http://localhost:4321/api/analytics?type=dashboard');
  const data = await response.json();
  if (data.success && data.data) {
    // Ensure all required properties exist with fallbacks
    crmData = {
      leads: data.data.leads || [],
      clients: data.data.clients || [],
      deals: data.data.deals || [],
      followUps: data.data.followUps || [],
      pendingFollowUps: data.data.pendingFollowUps || [],
      pricingRules: data.data.pricingRules || [],
      kpis: data.data.kpis || crmData.kpis
    };
  }
} catch (error) {
  console.error('Failed to load CRM data:', error);
}

// Helper functions
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    'new': '#3b82f6',
    'contacted': '#f59e0b',
    'qualified': '#8b5cf6',
    'proposal': '#06b6d4',
    'converted': '#10b981',
    'lost': '#ef4444',
    'active': '#10b981',
    'inactive': '#6b7280'
  };
  return colors[status] || '#6b7280';
}

function getPriorityLevel(lead: Lead): string {
  const value = lead.value || 0;
  if (value > 1000) return 'high';
  if (value > 500) return 'medium';
  return 'low';
}
---

<div class={`kps-crm-dashboard ${className}`} data-dashboard-id={dashboardId}>
  <!-- CRM Header -->
  <div class="crm-header">
    <div class="header-left">
      <h1 class="dashboard-title">
        <i class="fas fa-users"></i>
        KPS CRM Dashboard
      </h1>
      <p class="dashboard-subtitle">
        Complete customer relationship management and analytics
      </p>
    </div>
    
    <div class="header-right">
      <div class="header-actions">
        <button class="btn btn-primary" data-action="new-lead">
          <i class="fas fa-plus"></i>
          New Lead
        </button>
        <button class="btn btn-primary" data-action="new-client">
          <i class="fas fa-user-plus"></i>
          New Client
        </button>
        <button class="btn btn-info" data-action="toggle-kanban">
          <i class="fas fa-columns"></i>
          Kanban View
        </button>
        <button class="btn btn-secondary" data-action="send-bulk-emails">
          <i class="fas fa-envelope-bulk"></i>
          Bulk Email
        </button>
        <button class="btn btn-secondary" data-action="export-data">
          <i class="fas fa-download"></i>
          Export
        </button>
        <select class="time-range-select" data-time-range>
          <option value="24h">Last 24 Hours</option>
          <option value="7d" selected>Last 7 Days</option>
          <option value="30d">Last 30 Days</option>
          <option value="90d">Last 90 Days</option>
        </select>
      </div>
    </div>
  </div>

  <!-- KPI Cards -->
  <div class="kpi-grid">
    <div class="kpi-card revenue">
      <div class="kpi-header">
        <h3>Total Revenue</h3>
        <i class="fas fa-dollar-sign"></i>
      </div>
      <div class="kpi-value">{formatCurrency(crmData.kpis.totalRevenue)}</div>
      <div class="kpi-change positive">
        <i class="fas fa-arrow-up"></i>
        {crmData.kpis.monthlyGrowth}% this month
      </div>
    </div>

    <div class="kpi-card leads">
      <div class="kpi-header">
        <h3>Active Leads</h3>
        <i class="fas fa-user-plus"></i>
      </div>
      <div class="kpi-value">{crmData.kpis.totalLeads}</div>
      <div class="kpi-metric">
        Conversion Rate: {crmData.kpis.conversionRate}%
      </div>
    </div>

    <div class="kpi-card clients">
      <div class="kpi-header">
        <h3>Active Clients</h3>
        <i class="fas fa-users"></i>
      </div>
      <div class="kpi-value">{crmData.kpis.activeClients}</div>
      <div class="kpi-metric">
        Avg Deal: {formatCurrency(crmData.kpis.avgDealSize)}
      </div>
    </div>

    <div class="kpi-card deals">
      <div class="kpi-header">
        <h3>Deals Closed</h3>
        <i class="fas fa-handshake"></i>
      </div>
      <div class="kpi-value">{crmData.kpis.totalConversions}</div>
      <div class="kpi-metric">
        This period
      </div>
    </div>
  </div>

  <!-- Kanban Pipeline View (hidden by default) -->
  <div class="kanban-pipeline" id="kanbanPipeline" style="display: none;">
    <div class="kanban-header">
      <h2>Sales Pipeline</h2>
      <div class="pipeline-stats">
        <span class="stat">Total Value: <span id="pipelineTotal">{formatCurrency(crmData.leads.reduce((total, lead) => total + lead.value, 0))}</span></span>
        <span class="stat">Leads: <span id="pipelineCount">{crmData.leads.length}</span></span>
      </div>
    </div>
    
    <div class="kanban-board">
      <div class="kanban-column" data-status="new">
        <div class="column-header">
          <h3>New Leads</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'new').length}</span>
        </div>
        <div class="kanban-cards" data-status="new">
          {crmData.leads.filter(lead => lead.status === 'new').map(lead => (
            <div class="kanban-card" data-lead-id={lead.id} draggable="true">
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="assign-lead" data-lead-id={lead.id}>
                  <i class="fas fa-user-check"></i>
                </button>
                <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id}>
                  <i class="fas fa-envelope"></i>
                </button>
                <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id}>
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div class="kanban-column" data-status="contacted">
        <div class="column-header">
          <h3>Contacted</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'contacted').length}</span>
        </div>
        <div class="kanban-cards" data-status="contacted">
          {crmData.leads.filter(lead => lead.status === 'contacted').map(lead => (
            <div class="kanban-card" data-lead-id={lead.id} draggable="true">
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="assign-lead" data-lead-id={lead.id}>
                  <i class="fas fa-user-check"></i>
                </button>
                <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id}>
                  <i class="fas fa-envelope"></i>
                </button>
                <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id}>
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div class="kanban-column" data-status="qualified">
        <div class="column-header">
          <h3>Qualified</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'qualified').length}</span>
        </div>
        <div class="kanban-cards" data-status="qualified">
          {crmData.leads.filter(lead => lead.status === 'qualified').map(lead => (
            <div class="kanban-card" data-lead-id={lead.id} draggable="true">
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="assign-lead" data-lead-id={lead.id}>
                  <i class="fas fa-user-check"></i>
                </button>
                <button class="btn btn-xs" data-action="convert-lead" data-lead-id={lead.id}>
                  <i class="fas fa-handshake"></i>
                </button>
                <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id}>
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div class="kanban-column" data-status="proposal">
        <div class="column-header">
          <h3>Proposal Sent</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'proposal').length}</span>
        </div>
        <div class="kanban-cards" data-status="proposal">
          {crmData.leads.filter(lead => lead.status === 'proposal').map(lead => (
            <div class="kanban-card" data-lead-id={lead.id} draggable="true">
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="convert-lead" data-lead-id={lead.id}>
                  <i class="fas fa-handshake"></i>
                </button>
                <button class="btn btn-xs" data-action="follow-up" data-lead-id={lead.id}>
                  <i class="fas fa-clock"></i>
                </button>
                <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id}>
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div class="kanban-column" data-status="closed-won">
        <div class="column-header success">
          <h3>Closed Won</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'closed-won').length}</span>
        </div>
        <div class="kanban-cards" data-status="closed-won">
          {crmData.leads.filter(lead => lead.status === 'closed-won').map(lead => (
            <div class="kanban-card success" data-lead-id={lead.id}>
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="view-client" data-lead-id={lead.id}>
                  <i class="fas fa-eye"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div class="kanban-column" data-status="closed-lost">
        <div class="column-header danger">
          <h3>Closed Lost</h3>
          <span class="column-count">{crmData.leads.filter(l => l.status === 'closed-lost').length}</span>
        </div>
        <div class="kanban-cards" data-status="closed-lost">
          {crmData.leads.filter(lead => lead.status === 'closed-lost').map(lead => (
            <div class="kanban-card danger" data-lead-id={lead.id}>
              <div class="card-header">
                <h4>{lead.name}</h4>
                <span class="card-value">{formatCurrency(lead.value)}</span>
              </div>
              <div class="card-details">
                <p class="service">{lead.service}</p>
                <p class="contact">{lead.email}</p>
                <p class="location">{lead.city}</p>
              </div>
              <div class="card-actions">
                <button class="btn btn-xs" data-action="reactivate-lead" data-lead-id={lead.id}>
                  <i class="fas fa-redo"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <div class="dashboard-grid" id="dashboardGrid">
    <!-- Leads Management -->
    <div class="dashboard-card leads-card">
      <div class="card-header">
        <h3>Lead Pipeline</h3>
        <div class="card-actions">
          <button class="btn btn-sm" data-filter-leads="all">All</button>
          <button class="btn btn-sm" data-filter-leads="new">New</button>
          <button class="btn btn-sm" data-filter-leads="qualified">Qualified</button>
          <button class="btn btn-sm" data-filter-leads="high-value">High Value</button>
        </div>
      </div>
      
      <div class="leads-table-container">
        <table class="leads-table">
          <thead>
            <tr>
              <th>Lead</th>
              <th>Service</th>
              <th>Value</th>
              <th>Status</th>
              <th>Next Follow-up</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {(crmData.leads && crmData.leads.length > 0) ? (
              crmData.leads.slice(0, 10).map((lead: Lead) => (
                <tr class={`lead-row priority-${getPriorityLevel(lead)}`} data-lead-id={lead.id}>
                  <td class="lead-info">
                    <div class="lead-name">{lead.name}</div>
                    <div class="lead-contact">
                      {lead.email} • {lead.phone}
                    </div>
                    <div class="lead-location">{lead.city}</div>
                  </td>
                  <td class="service-cell">
                    <span class="service-badge">{lead.service}</span>
                  </td>
                  <td class="value-cell">
                    <span class="value-amount">{formatCurrency(lead.value)}</span>
                  </td>
                  <td class="status-cell">
                    <span 
                      class="status-badge" 
                      style={`background: ${getStatusColor(lead.status)}`}
                    >
                      {lead.status}
                    </span>
                  </td>
                  <td class="followup-cell">
                    {lead.nextFollowUp ? (
                      <span class="followup-date">
                        {formatDate(lead.nextFollowUp)}
                      </span>
                    ) : (
                      <span class="no-followup">Not scheduled</span>
                    )}
                  </td>
                  <td class="actions-cell">
                    <div class="lead-actions">
                      <button 
                        class="btn btn-xs btn-primary" 
                        data-action="email-lead" 
                        data-lead-id={lead.id}
                        title="Send Email via Outlook"
                      >
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button 
                        class="btn btn-xs btn-secondary" 
                        data-action="call-lead" 
                        data-phone={lead.phone}
                        title="Call Lead"
                      >
                        <i class="fas fa-phone"></i>
                      </button>
                      <button 
                        class="btn btn-xs btn-success" 
                        data-action="convert-lead" 
                        data-lead-id={lead.id}
                        title="Convert to Client"
                      >
                        <i class="fas fa-user-check"></i>
                      </button>
                      <button 
                        class="btn btn-xs" 
                        data-action="view-lead" 
                        data-lead-id={lead.id}
                        title="View Details"
                      >
                        <i class="fas fa-eye"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colspan="6" class="no-data">
                  <div class="empty-state">
                    <i class="fas fa-user-plus"></i>
                    <p>No leads available</p>
                    <small>New leads will appear here as they come through your website</small>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Follow-ups & Tasks -->
    <div class="dashboard-card followups-card">
      <div class="card-header">
        <h3>Pending Follow-ups</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-primary" data-action="schedule-followup">
            <i class="fas fa-plus"></i>
            Schedule
          </button>
        </div>
      </div>
      
      <div class="followups-list">
        {(crmData.pendingFollowUps && crmData.pendingFollowUps.length > 0) ? (
          crmData.pendingFollowUps.map((followUp: FollowUp) => {
            const lead = crmData.leads.find((l: Lead) => l.id === followUp.leadId);
            return (
              <div class="followup-item" data-followup-id={followUp.id}>
                <div class="followup-icon">
                  <i class="fas fa-clock"></i>
                </div>
                <div class="followup-content">
                  <div class="followup-lead">
                    {lead ? lead.name : 'Unknown Lead'}
                  </div>
                  <div class="followup-type">{followUp.type.replace('_', ' ')}</div>
                  <div class="followup-time">
                    Due: {formatDate(followUp.scheduledFor)}
                  </div>
                  {followUp.notes && (
                    <div class="followup-notes">{followUp.notes}</div>
                  )}
                </div>
                <div class="followup-actions">
                  <button 
                    class="btn btn-xs btn-primary" 
                    data-action="execute-followup" 
                    data-followup-id={followUp.id}
                  >
                    <i class="fas fa-envelope"></i>
                  </button>
                  <button 
                    class="btn btn-xs" 
                    data-action="postpone-followup" 
                    data-followup-id={followUp.id}
                  >
                    <i class="fas fa-clock"></i>
                  </button>
                </div>
              </div>
            );
          })
        ) : (
          <div class="empty-state">
            <i class="fas fa-clock"></i>
            <p>No pending follow-ups</p>
            <small>Scheduled follow-ups will appear here</small>
          </div>
        )}
      </div>
    </div>

    <!-- Pricing Management -->
    <div class="dashboard-card pricing-card">
      <div class="card-header">
        <h3>Pricing Management</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-primary" data-action="update-pricing">
            <i class="fas fa-edit"></i>
            Update Pricing
          </button>
          <button class="btn btn-sm" data-action="calculate-quote">
            <i class="fas fa-calculator"></i>
            Quote Calculator
          </button>
        </div>
      </div>
      
      <div class="pricing-rules-list">
        {(crmData.pricingRules && crmData.pricingRules.length > 0) ? (
          crmData.pricingRules.map((rule: any) => (
            <div class="pricing-rule" data-rule-id={rule.id}>
              <div class="rule-header">
                <h4>{rule.service}</h4>
                <span class={`rule-status ${rule.active ? 'active' : 'inactive'}`}>
                  {rule.active ? 'Active' : 'Inactive'}
                </span>
              </div>
              <div class="rule-pricing">
                <div class="base-price">
                  Base: {formatCurrency(rule.basePrice)}
                </div>
                <div class="pricing-factors">
                  {Object.entries(rule.factors).map(([size, factor]) => (
                    <span class="factor-badge">
                      {size}: {factor}x
                    </span>
                  ))}
                </div>
              </div>
              <div class="rule-actions">
                <button 
                  class="btn btn-xs" 
                  data-action="edit-pricing" 
                  data-rule-id={rule.id}
                >
                  <i class="fas fa-edit"></i>
                </button>
                <button 
                  class="btn btn-xs" 
                  data-action="toggle-pricing" 
                  data-rule-id={rule.id}
                >
                  <i class={`fas fa-${rule.active ? 'pause' : 'play'}`}></i>
                </button>
              </div>
            </div>
          ))
        ) : (
          <div class="empty-state">
            <i class="fas fa-dollar-sign"></i>
            <p>No pricing rules configured</p>
            <small>Set up pricing rules to streamline quotes</small>
          </div>
        )}
      </div>
    </div>

    <!-- Client Management -->
    <div class="dashboard-card clients-card">
      <div class="card-header">
        <h3>Client Portfolio</h3>
        <div class="card-actions">
          <button class="btn btn-sm" data-action="view-all-clients">
            View All
          </button>
        </div>
      </div>
      
      <div class="clients-grid">
        {(crmData.clients && crmData.clients.length > 0) ? (
          crmData.clients.slice(0, 6).map((client: Client) => (
            <div class="client-card" data-client-id={client.id}>
              <div class="client-header">
                <div class="client-avatar">
                  {client.name.charAt(0).toUpperCase()}
                </div>
                <div class="client-info">
                  <h4>{client.name}</h4>
                  <div class="client-contact">{client.email}</div>
                </div>
              </div>
              <div class="client-metrics">
                <div class="metric">
                  <span class="metric-label">Total Value</span>
                  <span class="metric-value">{formatCurrency(client.totalValue)}</span>
                </div>
                <div class="metric">
                  <span class="metric-label">Since</span>
                  <span class="metric-value">{formatDate(client.joinedAt)}</span>
                </div>
              </div>
              <div class="client-status">
                <span 
                  class="status-badge" 
                  style={`background: ${getStatusColor(client.status)}`}
                >
                  {client.status}
                </span>
              </div>
            </div>
          ))
        ) : (
          <div class="empty-state">
            <i class="fas fa-users"></i>
            <p>No clients yet</p>
            <small>Converted leads will become clients</small>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Quick Actions Panel -->
  <div class="quick-actions-panel">
    <h3>Quick Actions</h3>
    <div class="actions-grid">
      <button class="action-card" data-action="bulk-email-followup">
        <i class="fas fa-envelope-bulk"></i>
        <span>Send Follow-up Emails</span>
      </button>
      <button class="action-card" data-action="revenue-report">
        <i class="fas fa-chart-line"></i>
        <span>Generate Revenue Report</span>
      </button>
      <button class="action-card" data-action="update-all-pricing">
        <i class="fas fa-dollar-sign"></i>
        <span>Bulk Pricing Update</span>
      </button>
      <button class="action-card" data-action="export-leads">
        <i class="fas fa-download"></i>
        <span>Export Lead Data</span>
      </button>
      <button class="action-card" data-action="schedule-team-followups">
        <i class="fas fa-calendar-plus"></i>
        <span>Schedule Team Follow-ups</span>
      </button>
      <button class="action-card" data-action="client-health-check">
        <i class="fas fa-heartbeat"></i>
        <span>Client Health Check</span>
      </button>
    </div>
  </div>
</div>

<!-- Modals and Forms (will be handled by JavaScript) -->
<div class="modal-overlay" id="crmModal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modalTitle">CRM Action</h3>
      <button class="modal-close" onclick="closeCrmModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body" id="modalBody">
      <!-- Dynamic content will be loaded here -->
    </div>
  </div>
</div>

<style>
  .kps-crm-dashboard {
    min-height: 100vh;
    background: #f8fafc;
    padding: 2rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Header Styles */
  .crm-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .dashboard-title {
    color: #1e3a8a;
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dashboard-subtitle {
    color: #64748b;
    margin: 0;
    font-size: 1.1rem;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  /* KPI Grid */
  .kpi-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .kpi-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #e5e7eb;
  }

  .kpi-card.revenue { border-left-color: #10b981; }
  .kpi-card.leads { border-left-color: #3b82f6; }
  .kpi-card.clients { border-left-color: #8b5cf6; }
  .kpi-card.deals { border-left-color: #f59e0b; }

  .kpi-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .kpi-header h3 {
    margin: 0;
    color: #374151;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .kpi-header i {
    color: #9ca3af;
    font-size: 1.2rem;
  }

  .kpi-value {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .kpi-change, .kpi-metric {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .kpi-change.positive {
    color: #10b981;
  }

  .kpi-change.negative {
    color: #ef4444;
  }

  /* Dashboard Grid */
  .dashboard-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  /* Kanban Pipeline Styles */
  .kanban-pipeline {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
    overflow: hidden;
  }

  .kanban-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .kanban-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .pipeline-stats {
    display: flex;
    gap: 2rem;
  }

  .pipeline-stats .stat {
    font-size: 0.9rem;
    opacity: 0.9;
  }

  .kanban-board {
    display: flex;
    gap: 1rem;
    padding: 1.5rem;
    overflow-x: auto;
    min-height: 600px;
  }

  .kanban-column {
    flex: 1;
    min-width: 280px;
    background: #f8fafc;
    border-radius: 8px;
    padding: 1rem;
    border: 2px dashed transparent;
    transition: all 0.2s ease;
  }

  .kanban-column.drag-over {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .column-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e5e7eb;
  }

  .column-header.success {
    border-bottom-color: #10b981;
  }

  .column-header.danger {
    border-bottom-color: #ef4444;
  }

  .column-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: #374151;
  }

  .column-header.success h3 {
    color: #10b981;
  }

  .column-header.danger h3 {
    color: #ef4444;
  }

  .column-count {
    background: #6b7280;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .column-header.success .column-count {
    background: #10b981;
  }

  .column-header.danger .column-count {
    background: #ef4444;
  }

  .kanban-cards {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    min-height: 200px;
  }

  .kanban-card {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #e5e7eb;
    cursor: grab;
    transition: all 0.2s ease;
    position: relative;
  }

  .kanban-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }

  .kanban-card:active {
    cursor: grabbing;
  }

  .kanban-card.success {
    border-left-color: #10b981;
  }

  .kanban-card.danger {
    border-left-color: #ef4444;
  }

  .kanban-card.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
  }

  .kanban-card .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
    padding: 0;
    border: none;
  }

  .kanban-card .card-header h4 {
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: #374151;
    line-height: 1.3;
  }

  .card-value {
    font-size: 0.85rem;
    font-weight: 600;
    color: #059669;
    background: #d1fae5;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }

  .kanban-card .card-details {
    margin-bottom: 0.75rem;
  }

  .kanban-card .card-details p {
    margin: 0 0 0.25rem;
    font-size: 0.8rem;
    color: #6b7280;
    line-height: 1.3;
  }

  .kanban-card .card-details .service {
    color: #3730a3;
    font-weight: 500;
  }

  .kanban-card .card-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
  }

  .kanban-card .card-actions .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
  }

  .dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #f3f4f6;
  }

  .card-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
  }

  /* Leads Table */
  .leads-table-container {
    overflow-x: auto;
  }

  .leads-table {
    width: 100%;
    border-collapse: collapse;
  }

  .leads-table th,
  .leads-table td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #f3f4f6;
  }

  .leads-table th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .lead-row {
    transition: background-color 0.2s;
  }

  .lead-row:hover {
    background: #f9fafb;
  }

  .lead-row.priority-high {
    border-left: 3px solid #ef4444;
  }

  .lead-row.priority-medium {
    border-left: 3px solid #f59e0b;
  }

  .lead-row.priority-low {
    border-left: 3px solid #10b981;
  }

  .lead-info {
    min-width: 200px;
  }

  .lead-name {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .lead-contact {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.25rem;
  }

  .lead-location {
    font-size: 0.75rem;
    color: #9ca3af;
  }

  .service-badge,
  .status-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    color: white;
  }

  .service-badge {
    background: #6b7280;
  }

  .value-amount {
    font-weight: 600;
    color: #1f2937;
  }

  .followup-date {
    font-size: 0.875rem;
    color: #374151;
  }

  .no-followup {
    font-size: 0.875rem;
    color: #9ca3af;
    font-style: italic;
  }

  .lead-actions {
    display: flex;
    gap: 0.25rem;
  }

  /* Follow-ups List */
  .followups-list {
    padding: 1rem;
    max-height: 400px;
    overflow-y: auto;
  }

  .followup-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    border: 1px solid #f3f4f6;
    border-radius: 8px;
    margin-bottom: 1rem;
    background: #fafafa;
  }

  .followup-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: #fbbf24;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .followup-content {
    flex: 1;
  }

  .followup-lead {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .followup-type {
    font-size: 0.875rem;
    color: #6b7280;
    text-transform: capitalize;
    margin-bottom: 0.25rem;
  }

  .followup-time {
    font-size: 0.75rem;
    color: #9ca3af;
  }

  .followup-notes {
    font-size: 0.875rem;
    color: #4b5563;
    margin-top: 0.5rem;
    font-style: italic;
  }

  .followup-actions {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  /* Pricing Rules */
  .pricing-rules-list {
    padding: 1rem;
  }

  .pricing-rule {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .rule-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .rule-header h4 {
    margin: 0;
    color: #1f2937;
    font-size: 1rem;
    font-weight: 600;
  }

  .rule-status.active {
    background: #10b981;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .rule-status.inactive {
    background: #6b7280;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .rule-pricing {
    margin-bottom: 1rem;
  }

  .base-price {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .pricing-factors {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .factor-badge {
    background: #f3f4f6;
    color: #374151;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .rule-actions {
    display: flex;
    gap: 0.5rem;
  }

  /* Client Grid */
  .clients-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }

  .client-card {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    background: #fafafa;
  }

  .client-header {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .client-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #3b82f6;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
  }

  .client-info h4 {
    margin: 0 0 0.25rem;
    color: #1f2937;
    font-size: 1rem;
  }

  .client-contact {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .client-metrics {
    margin-bottom: 1rem;
  }

  .metric {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .metric-label {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .metric-value {
    font-size: 0.875rem;
    font-weight: 600;
    color: #1f2937;
  }

  /* Quick Actions */
  .quick-actions-panel {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .quick-actions-panel h3 {
    margin: 0 0 1.5rem;
    color: #1f2937;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .action-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    background: white;
    transition: all 0.2s;
    cursor: pointer;
    text-decoration: none;
    color: #374151;
  }

  .action-card:hover {
    border-color: #3b82f6;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .action-card i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #6b7280;
  }

  .action-card:hover i {
    color: #3b82f6;
  }

  .action-card span {
    font-weight: 500;
    text-align: center;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-primary {
    background: #3b82f6;
    color: white;
  }

  .btn-primary:hover {
    background: #2563eb;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-success {
    background: #10b981;
    color: white;
  }

  .btn-success:hover {
    background: #059669;
  }

  .btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.8rem;
  }

  .btn-xs {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
  }

  /* Empty States */
  .empty-state {
    text-align: center;
    padding: 3rem 2rem;
    color: #6b7280;
  }

  .empty-state i {
    font-size: 3rem;
    color: #d1d5db;
    margin-bottom: 1rem;
  }

  .empty-state p {
    font-size: 1.1rem;
    font-weight: 500;
    margin: 0 0 0.5rem;
    color: #374151;
  }

  .empty-state small {
    font-size: 0.9rem;
    color: #9ca3af;
  }

  .no-data {
    padding: 0 !important;
  }

  /* Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .modal-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #6b7280;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
  }

  .modal-close:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .modal-body {
    padding: 1.5rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
    }
    
    .kpi-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    
    .crm-header {
      flex-direction: column;
      gap: 1rem;
    }
    
    .header-actions {
      flex-wrap: wrap;
    }
    
    .actions-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }
  }
</style>

<script is:inline>
  // CRM Dashboard JavaScript functionality
  
  // Initialize CRM Dashboard
  document.addEventListener('DOMContentLoaded', function() {
    initializeCrmDashboard();
  });

  function initializeCrmDashboard() {
    // Event listeners for CRM actions
    document.addEventListener('click', handleCrmActions);
    
    // Auto-refresh data every 5 minutes
    setInterval(refreshCrmData, 300000);
    
    // Initialize filters
    initializeFilters();
  }

  function handleCrmActions(event) {
    const action = event.target.closest('[data-action]')?.dataset.action;
    if (!action) return;

    event.preventDefault();
    
    switch (action) {
      case 'email-lead':
        handleEmailLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'convert-lead':
        handleConvertLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'schedule-followup':
        console.log('Schedule followup action');
        break;
      case 'update-pricing':
        console.log('Update pricing action');
        break;
      case 'calculate-quote':
        console.log('Calculate quote action');
        break;
      case 'execute-followup':
        console.log('Execute followup action');
        break;
      case 'bulk-email-followup':
        console.log('Bulk email followup action');
        break;
      case 'revenue-report':
        console.log('Revenue report action');
        break;
      default:
        console.log('Unhandled action:', action);
    }
  }

  async function handleEmailLead(leadId) {
    try {
      showCrmModal('Send Email', `
        <form id="emailForm" class="email-form">
          <div class="form-group">
            <label for="emailType">Email Type:</label>
            <select id="emailType" name="emailType" required>
              <option value="initial_contact">Initial Contact</option>
              <option value="follow_up">Follow Up</option>
              <option value="pricing_update">Pricing Update</option>
              <option value="check_in">Check In</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="customMessage">Custom Message (optional):</label>
            <textarea id="customMessage" name="customMessage" rows="4" 
              placeholder="Add any custom message to include in the email..."></textarea>
          </div>
          
          <div class="form-actions">
            <button type="button" onclick="closeCrmModal()" class="btn btn-secondary">Cancel</button>
            <button type="submit" class="btn btn-primary">Open in Outlook</button>
          </div>
        </form>
      `);

      document.getElementById('emailForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const emailData = {
          leadId: leadId,
          emailType: formData.get('emailType'),
          customMessage: formData.get('customMessage')
        };
        
        const response = await fetch('/api/outlook', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(emailData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Open Outlook with pre-filled email
          window.open(result.data.outlookUrl, '_blank');
          closeCrmModal();
          showNotification('Email opened in Outlook successfully!', 'success');
        } else {
          showNotification('Failed to create email: ' + result.error, 'error');
        }
      });
      
    } catch (error) {
      console.error('Error handling email lead:', error);
      showNotification('Error creating email', 'error');
    }
  }

  async function handleConvertLead(leadId) {
    showCrmModal('Convert Lead to Client', `
      <form id="convertForm" class="convert-form">
        <div class="form-group">
          <label for="dealAmount">Deal Amount ($):</label>
          <input type="number" id="dealAmount" name="dealAmount" required min="0" step="0.01">
        </div>
        
        <div class="form-group">
          <label for="services">Services:</label>
          <select id="services" name="services" multiple required>
            <option value="QuickBooks Setup">QuickBooks Setup</option>
            <option value="Monthly Bookkeeping">Monthly Bookkeeping</option>
            <option value="Payroll Services">Payroll Services</option>
            <option value="Business Consulting">Business Consulting</option>
            <option value="Tax Preparation">Tax Preparation</option>
          </select>
        </div>
        
        <div class="form-actions">
          <button type="button" onclick="closeCrmModal()" class="btn btn-secondary">Cancel</button>
          <button type="submit" class="btn btn-success">Convert to Client</button>
        </div>
      </form>
    `);

    document.getElementById('convertForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const convertData = {
        type: 'convert_lead',
        leadId: parseInt(leadId),
        dealAmount: parseFloat(formData.get('dealAmount')),
        services: Array.from(formData.getAll('services'))
      };
      
      const response = await fetch('/api/analytics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(convertData)
      });
      
      const result = await response.json();
      
      if (result.success) {
        closeCrmModal();
        refreshCrmData();
        showNotification('Lead converted to client successfully!', 'success');
      } else {
        showNotification('Failed to convert lead: ' + result.error, 'error');
      }
    });
  }

  function showCrmModal(title, content) {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalBody').innerHTML = content;
    document.getElementById('crmModal').style.display = 'flex';
  }

  function closeCrmModal() {
    document.getElementById('crmModal').style.display = 'none';
  }

  function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  async function refreshCrmData() {
    try {
      const response = await fetch('/api/analytics?type=dashboard');
      const data = await response.json();
      
      if (data.success) {
        // Update dashboard data
        location.reload(); // Simple refresh for now
      }
    } catch (error) {
      console.error('Error refreshing CRM data:', error);
    }
  }

  function initializeFilters() {
    // Lead filters
    document.querySelectorAll('[data-filter-leads]').forEach(button => {
      button.addEventListener('click', (e) => {
        const filter = e.target.dataset.filterLeads;
        filterLeads(filter);
        
        // Update active button
        document.querySelectorAll('[data-filter-leads]').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
      });
    });
  }

  function filterLeads(filter) {
    const rows = document.querySelectorAll('.lead-row');
    
    rows.forEach(row => {
      const leadData = {
        status: row.querySelector('.status-badge').textContent.trim(),
        priority: row.classList.contains('priority-high') ? 'high' : 
                 row.classList.contains('priority-medium') ? 'medium' : 'low'
      };
      
      let shouldShow = true;
      
      switch (filter) {
        case 'new':
          shouldShow = leadData.status === 'new';
          break;
        case 'qualified':
          shouldShow = leadData.status === 'qualified';
          break;
        case 'high-value':
          shouldShow = leadData.priority === 'high';
          break;
        case 'all':
        default:
          shouldShow = true;
      }
      
      row.style.display = shouldShow ? '' : 'none';
    });
  }

  // Additional CRM functions can be added here

  // New Lead Creation
  function handleNewLead() {
    showCrmModal('Create New Lead', `
      <form id="newLeadForm" class="new-lead-form">
        <div class="form-group">
          <label for="leadName">Full Name:</label>
          <input type="text" id="leadName" name="name" required placeholder="Enter full name">
        </div>
        
        <div class="form-group">
          <label for="leadEmail">Email:</label>
          <input type="email" id="leadEmail" name="email" required placeholder="Enter email address">
        </div>
        
        <div class="form-group">
          <label for="leadPhone">Phone:</label>
          <input type="tel" id="leadPhone" name="phone" required placeholder="Enter phone number">
        </div>
        
        <div class="form-group">
          <label for="leadService">Service Interest:</label>
          <select id="leadService" name="service" required>
            <option value="">Select a service</option>
            <option value="QuickBooks Setup">QuickBooks Setup</option>
            <option value="Monthly Bookkeeping">Monthly Bookkeeping</option>
            <option value="Payroll Services">Payroll Services</option>
            <option value="Business Consulting">Business Consulting</option>
            <option value="Tax Preparation">Tax Preparation</option>
            <option value="Financial Planning">Financial Planning</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="leadCity">City/Location:</label>
          <input type="text" id="leadCity" name="city" required placeholder="Enter city">
        </div>
        
        <div class="form-group">
          <label for="leadValue">Estimated Value:</label>
          <input type="number" id="leadValue" name="value" min="0" step="0.01" placeholder="Enter estimated value">
        </div>
        
        <div class="form-group">
          <label for="leadStatus">Initial Status:</label>
          <select id="leadStatus" name="status" required>
            <option value="new">New</option>
            <option value="contacted">Contacted</option>
            <option value="qualified">Qualified</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="leadNotes">Initial Notes:</label>
          <textarea id="leadNotes" name="notes" rows="3" placeholder="Add any initial notes about this lead"></textarea>
        </div>
        
        <div class="form-actions">
          <button type="button" onclick="closeCrmModal()" class="btn btn-secondary">Cancel</button>
          <button type="submit" class="btn btn-primary">Create Lead</button>
        </div>
      </form>
    `);

    document.getElementById('newLeadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const leadData = {
        type: 'create_lead',
        name: formData.get('name'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        service: formData.get('service'),
        city: formData.get('city'),
        value: parseFloat(formData.get('value')) || 0,
        status: formData.get('status'),
        notes: formData.get('notes'),
        timestamp: new Date().toISOString()
      };
      
      try {
        const response = await fetch('/api/analytics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(leadData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          closeCrmModal();
          refreshCrmData();
          showNotification('New lead created successfully!', 'success');
        } else {
          showNotification('Failed to create lead: ' + result.error, 'error');
        }
      } catch (error) {
        showNotification('Error creating lead: ' + error.message, 'error');
      }
    });
  }

  // New Client Creation
  function handleNewClient() {
    showCrmModal('Create New Client', `
      <form id="newClientForm" class="new-client-form">
        <div class="form-group">
          <label for="clientName">Client Name:</label>
          <input type="text" id="clientName" name="name" required placeholder="Enter client name">
        </div>
        
        <div class="form-group">
          <label for="clientEmail">Email:</label>
          <input type="email" id="clientEmail" name="email" required placeholder="Enter email address">
        </div>
        
        <div class="form-group">
          <label for="clientPhone">Phone:</label>
          <input type="tel" id="clientPhone" name="phone" required placeholder="Enter phone number">
        </div>
        
        <div class="form-group">
          <label for="clientCompany">Company:</label>
          <input type="text" id="clientCompany" name="company" placeholder="Enter company name">
        </div>
        
        <div class="form-group">
          <label for="clientServices">Services:</label>
          <select id="clientServices" name="services" multiple required>
            <option value="QuickBooks Setup">QuickBooks Setup</option>
            <option value="Monthly Bookkeeping">Monthly Bookkeeping</option>
            <option value="Payroll Services">Payroll Services</option>
            <option value="Business Consulting">Business Consulting</option>
            <option value="Tax Preparation">Tax Preparation</option>
            <option value="Financial Planning">Financial Planning</option>
          </select>
          <small>Hold Ctrl/Cmd to select multiple services</small>
        </div>
        
        <div class="form-group">
          <label for="clientValue">Initial Contract Value:</label>
          <input type="number" id="clientValue" name="totalValue" min="0" step="0.01" placeholder="Enter contract value">
        </div>
        
        <div class="form-group">
          <label for="clientStatus">Client Status:</label>
          <select id="clientStatus" name="status" required>
            <option value="active">Active</option>
            <option value="onboarding">Onboarding</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="clientNotes">Notes:</label>
          <textarea id="clientNotes" name="notes" rows="3" placeholder="Add any notes about this client"></textarea>
        </div>
        
        <div class="form-actions">
          <button type="button" onclick="closeCrmModal()" class="btn btn-secondary">Cancel</button>
          <button type="submit" class="btn btn-primary">Create Client</button>
        </div>
      </form>
    `);

    document.getElementById('newClientForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const clientData = {
        type: 'create_client',
        name: formData.get('name'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        company: formData.get('company'),
        services: Array.from(formData.getAll('services')),
        totalValue: parseFloat(formData.get('totalValue')) || 0,
        status: formData.get('status'),
        notes: formData.get('notes'),
        joinedAt: new Date().toISOString()
      };
      
      try {
        const response = await fetch('/api/analytics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(clientData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          closeCrmModal();
          refreshCrmData();
          showNotification('New client created successfully!', 'success');
        } else {
          showNotification('Failed to create client: ' + result.error, 'error');
        }
      } catch (error) {
        showNotification('Error creating client: ' + error.message, 'error');
      }
    });
  }

  // Lead Assignment Function
  function handleAssignLead(leadId) {
    showCrmModal('Assign Lead', `
      <form id="assignLeadForm" class="assign-lead-form">
        <div class="form-group">
          <label for="assignTo">Assign to Team Member:</label>
          <select id="assignTo" name="assignedTo" required>
            <option value="">Select team member</option>
            <option value="karson">Karson (CEO)</option>
            <option value="brandon">Brandon (CRO)</option>
            <option value="allie">Allie (CAO)</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="assignmentNotes">Assignment Notes:</label>
          <textarea id="assignmentNotes" name="notes" rows="3" placeholder="Add notes about this assignment"></textarea>
        </div>
        
        <div class="form-group">
          <label for="followUpDate">Follow-up Date:</label>
          <input type="datetime-local" id="followUpDate" name="followUpDate">
        </div>
        
        <div class="form-actions">
          <button type="button" onclick="closeCrmModal()" class="btn btn-secondary">Cancel</button>
          <button type="submit" class="btn btn-primary">Assign Lead</button>
        </div>
      </form>
    `);

    document.getElementById('assignLeadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const assignmentData = {
        type: 'assign_lead',
        leadId: parseInt(leadId),
        assignedTo: formData.get('assignedTo'),
        notes: formData.get('notes'),
        followUpDate: formData.get('followUpDate'),
        assignedAt: new Date().toISOString()
      };
      
      try {
        const response = await fetch('/api/analytics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(assignmentData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          closeCrmModal();
          refreshCrmData();
          showNotification('Lead assigned successfully!', 'success');
        } else {
          showNotification('Failed to assign lead: ' + result.error, 'error');
        }
      } catch (error) {
        showNotification('Error assigning lead: ' + error.message, 'error');
      }
    });
  }

  // Kanban Toggle Function
  function toggleKanbanView() {
    const kanbanPipeline = document.getElementById('kanbanPipeline');
    const dashboardGrid = document.getElementById('dashboardGrid');
    const toggleBtn = document.querySelector('[data-action="toggle-kanban"]');
    
    if (kanbanPipeline.style.display === 'none') {
      kanbanPipeline.style.display = 'block';
      dashboardGrid.style.display = 'none';
      toggleBtn.innerHTML = '<i class="fas fa-table"></i> Table View';
    } else {
      kanbanPipeline.style.display = 'none';
      dashboardGrid.style.display = 'grid';
      toggleBtn.innerHTML = '<i class="fas fa-columns"></i> Kanban View';
    }
  }

  // Kanban Drag and Drop Functionality
  function initializeKanbanDragDrop() {
    const kanbanCards = document.querySelectorAll('.kanban-card');
    const kanbanColumns = document.querySelectorAll('.kanban-cards');
    
    kanbanCards.forEach(card => {
      card.addEventListener('dragstart', handleDragStart);
      card.addEventListener('dragend', handleDragEnd);
    });
    
    kanbanColumns.forEach(column => {
      column.addEventListener('dragover', handleDragOver);
      column.addEventListener('drop', handleDrop);
      column.addEventListener('dragenter', handleDragEnter);
      column.addEventListener('dragleave', handleDragLeave);
    });
  }

  function handleDragStart(e) {
    e.target.classList.add('dragging');
    e.dataTransfer.setData('text/plain', e.target.dataset.leadId);
  }

  function handleDragEnd(e) {
    e.target.classList.remove('dragging');
  }

  function handleDragOver(e) {
    e.preventDefault();
  }

  function handleDragEnter(e) {
    e.preventDefault();
    e.target.closest('.kanban-column').classList.add('drag-over');
  }

  function handleDragLeave(e) {
    if (!e.target.closest('.kanban-column').contains(e.relatedTarget)) {
      e.target.closest('.kanban-column').classList.remove('drag-over');
    }
  }

  async function handleDrop(e) {
    e.preventDefault();
    const leadId = e.dataTransfer.getData('text/plain');
    const newStatus = e.target.dataset.status;
    const column = e.target.closest('.kanban-column');
    
    column.classList.remove('drag-over');
    
    if (!newStatus) return;
    
    try {
      const response = await fetch('/api/analytics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'update_lead_status',
          leadId: parseInt(leadId),
          status: newStatus,
          updatedAt: new Date().toISOString()
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        refreshCrmData();
        showNotification(`Lead moved to ${newStatus}!`, 'success');
      } else {
        showNotification('Failed to update lead status: ' + result.error, 'error');
      }
    } catch (error) {
      showNotification('Error updating lead status: ' + error.message, 'error');
    }
  }

  // Update the main CRM actions handler
  function handleCrmActionsEnhanced(event) {
    const action = event.target.closest('[data-action]')?.dataset.action;
    if (!action) return;

    event.preventDefault();
    
    switch (action) {
      case 'new-lead':
        handleNewLead();
        break;
      case 'new-client':
        handleNewClient();
        break;
      case 'assign-lead':
        handleAssignLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'toggle-kanban':
        toggleKanbanView();
        break;
      case 'email-lead':
        handleEmailLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'convert-lead':
        handleConvertLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'edit-lead':
        handleEditLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'view-client':
        handleViewClient(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      case 'reactivate-lead':
        handleReactivateLead(event.target.closest('[data-lead-id]').dataset.leadId);
        break;
      default:
        // Fall back to original handler
        handleCrmActions(event);
    }
  }

  // Initialize enhanced CRM functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Replace the original event listener with enhanced version
    document.removeEventListener('click', handleCrmActions);
    document.addEventListener('click', handleCrmActionsEnhanced);
    
    // Initialize Kanban drag and drop
    initializeKanbanDragDrop();
    
    // Initialize filters
    initializeFilters();
  });
</script>
