---
// Enhanced CRM Dashboard Component - Modern UI with visitor tracking and user roles
interface Lead {
  id: number;
  name: string;
  email: string;
  phone: string;
  service: string;
  status: string;
  value: number;
  timestamp: string;
  city: string;
  nextFollowUp?: string;
  notes?: Array<{id: number, text: string, timestamp: string}>;
}

interface Client {
  id: number;
  name: string;
  email: string;
  phone: string;
  totalValue: number;
  status: string;
  joinedAt: string;
}

interface Deal {
  id: number;
  amount: number;
  services: string[];
  status: string;
  closedAt: string;
}

interface FollowUp {
  id: number;
  leadId: number;
  type: string;
  scheduledFor: string;
  status: string;
  notes: string;
}

interface VisitorData {
  totalVisitors: number;
  todayVisitors: number;
  weeklyVisitors: number;
  monthlyVisitors: number;
  topPages: Array<{page: string, views: number}>;
  topSources: Array<{source: string, visitors: number}>;
  topCities: Array<{city: string, visitors: number}>;
  hourlyData: Array<{hour: number, visitors: number}>;
}

interface UserRole {
  id: number;
  name: string;
  permissions: string[];
  description: string;
}

const { className = '', dashboardId = 'crm-dashboard' } = Astro.props;

// Load CRM data from API
let crmData: {
  leads: Lead[];
  clients: Client[];
  deals: Deal[];
  followUps: FollowUp[];
  pendingFollowUps?: FollowUp[];
  pricingRules: any[];
  visitors: VisitorData;
  userRoles: UserRole[];
  kpis: {
    totalLeads: number;
    totalConversions: number;
    conversionRate: number;
    totalRevenue: number;
    activeClients: number;
    avgDealSize: number;
    monthlyGrowth: number;
  };
} = {
  leads: [],
  clients: [],
  deals: [],
  followUps: [],
  pendingFollowUps: [],
  pricingRules: [],
  visitors: {
    totalVisitors: 0,
    todayVisitors: 0,
    weeklyVisitors: 0,
    monthlyVisitors: 0,
    topPages: [],
    topSources: [],
    topCities: [],
    hourlyData: []
  },
  userRoles: [
    { id: 1, name: 'Admin', permissions: ['all'], description: 'Full system access' },
    { id: 2, name: 'Manager', permissions: ['view_all', 'edit_leads', 'edit_clients'], description: 'Manage leads and clients' },
    { id: 3, name: 'Sales Rep', permissions: ['view_assigned', 'edit_assigned'], description: 'View and edit assigned leads only' },
    { id: 4, name: 'Viewer', permissions: ['view_only'], description: 'Read-only access' }
  ],
  kpis: {
    totalLeads: 0,
    totalConversions: 0,
    conversionRate: 0,
    totalRevenue: 0,
    activeClients: 0,
    avgDealSize: 0,
    monthlyGrowth: 0
  }
};

try {
  const response = await fetch('http://localhost:4321/api/analytics?type=dashboard');
  const data = await response.json();
  if (data.success && data.data) {
    // Ensure all required properties exist with fallbacks
    crmData = {
      leads: data.data.leads || [],
      clients: data.data.clients || [],
      deals: data.data.deals || [],
      followUps: data.data.followUps || [],
      pendingFollowUps: data.data.pendingFollowUps || [],
      pricingRules: data.data.pricingRules || [],
      visitors: data.data.visitors || crmData.visitors,
      userRoles: data.data.userRoles || crmData.userRoles,
      kpis: data.data.kpis || crmData.kpis
    };
  }
} catch (error) {
  console.error('Failed to load CRM data:', error);
  // Generate sample visitor data for demo
  crmData.visitors = {
    totalVisitors: 1247,
    todayVisitors: 42,
    weeklyVisitors: 286,
    monthlyVisitors: 1089,
    topPages: [
      { page: '/', views: 345 },
      { page: '/services', views: 198 },
      { page: '/contact', views: 156 },
      { page: '/about-us', views: 98 },
      { page: '/locations', views: 67 }
    ],
    topSources: [
      { source: 'Google Search', visitors: 478 },
      { source: 'Direct', visitors: 342 },
      { source: 'Facebook', visitors: 156 },
      { source: 'LinkedIn', visitors: 98 },
      { source: 'Referral', visitors: 67 }
    ],
    topCities: [
      { city: 'New York', visitors: 234 },
      { city: 'Los Angeles', visitors: 189 },
      { city: 'Chicago', visitors: 145 },
      { city: 'Houston', visitors: 98 },
      { city: 'Phoenix', visitors: 76 }
    ],
    hourlyData: Array.from({ length: 24 }, (_, i) => ({
      hour: i,
      visitors: Math.floor(Math.random() * 20) + 5
    }))
  };
}

// Helper functions
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    'new': '#3b82f6',
    'contacted': '#f59e0b',
    'qualified': '#8b5cf6',
    'proposal': '#06b6d4',
    'converted': '#10b981',
    'lost': '#ef4444',
    'active': '#10b981',
    'inactive': '#6b7280'
  };
  return colors[status] || '#6b7280';
}

function getPriorityLevel(lead: Lead): string {
  const value = lead.value || 0;
  if (value > 1000) return 'high';
  if (value > 500) return 'medium';
  return 'low';
}
---

<div class={`kps-crm-dashboard ${className}`} data-dashboard-id={dashboardId}>
  <!-- Enhanced CRM Header -->
  <div class="crm-header">
    <div class="header-left">
      <h1 class="dashboard-title">
        <i class="fas fa-chart-line"></i>
        KPS CRM Dashboard
      </h1>
      <p class="dashboard-subtitle">
        Customer Relationship Management & Analytics
      </p>
    </div>
    
    <div class="header-right">
      <div class="header-actions">
        <div class="search-container">
          <i class="fas fa-search"></i>
          <input type="text" placeholder="Search leads, clients..." class="search-input" id="globalSearch" />
        </div>
        <button class="btn btn-primary" data-action="new-lead">
          <i class="fas fa-user-plus"></i>
          New Lead
        </button>
        <button class="btn btn-success" data-action="new-client">
          <i class="fas fa-handshake"></i>
          New Client
        </button>
        <button class="btn btn-info" data-action="toggle-kanban">
          <i class="fas fa-columns"></i>
          Pipeline
        </button>
        <button class="btn btn-secondary" data-action="manage-users">
          <i class="fas fa-users-cog"></i>
          User Roles
        </button>
        <div class="dropdown">
          <button class="btn btn-secondary dropdown-toggle" data-dropdown="actions">
            <i class="fas fa-ellipsis-v"></i>
            More
          </button>
          <div class="dropdown-menu" id="actionsDropdown">
            <a href="#" data-action="send-bulk-emails">
              <i class="fas fa-envelope-bulk"></i>
              Bulk Email
            </a>
            <a href="#" data-action="export-data">
              <i class="fas fa-download"></i>
              Export Data
            </a>
            <a href="#" data-action="import-data">
              <i class="fas fa-upload"></i>
              Import Data
            </a>
            <div class="dropdown-divider"></div>
            <a href="#" data-action="settings">
              <i class="fas fa-cog"></i>
              Settings
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced KPI Cards with Visitor Analytics -->
  <div class="kpi-grid">
    <div class="kpi-card revenue">
      <div class="kpi-header">
        <h3>Total Revenue</h3>
        <i class="fas fa-dollar-sign"></i>
      </div>
      <div class="kpi-value">{formatCurrency(crmData.kpis.totalRevenue)}</div>
      <div class="kpi-change positive">
        <i class="fas fa-arrow-up"></i>
        {crmData.kpis.monthlyGrowth}% vs last month
      </div>
      <div class="kpi-submetric">
        Avg Deal: {formatCurrency(crmData.kpis.avgDealSize)}
      </div>
    </div>

    <div class="kpi-card leads">
      <div class="kpi-header">
        <h3>Active Leads</h3>
        <i class="fas fa-user-plus"></i>
      </div>
      <div class="kpi-value">{crmData.kpis.totalLeads}</div>
      <div class="kpi-metric">
        Conversion Rate: {crmData.kpis.conversionRate}%
      </div>
      <div class="kpi-submetric">
        {crmData.leads.filter(l => l.status === 'new').length} new this week
      </div>
    </div>

    <div class="kpi-card visitors">
      <div class="kpi-header">
        <h3>Website Visitors</h3>
        <i class="fas fa-eye"></i>
      </div>
      <div class="kpi-value">{crmData.visitors.todayVisitors}</div>
      <div class="kpi-metric">
        Today ({crmData.visitors.weeklyVisitors} this week)
      </div>
      <div class="kpi-submetric">
        Total: {crmData.visitors.totalVisitors.toLocaleString()}
      </div>
    </div>

    <div class="kpi-card clients">
      <div class="kpi-header">
        <h3>Active Clients</h3>
        <i class="fas fa-users"></i>
      </div>
      <div class="kpi-value">{crmData.kpis.activeClients}</div>
      <div class="kpi-metric">
        {crmData.kpis.totalConversions} deals closed
      </div>
      <div class="kpi-submetric">
        {Math.round((crmData.kpis.totalConversions / crmData.kpis.totalLeads) * 100)}% conversion rate
      </div>
    </div>
  </div>

  <!-- Main Dashboard Content -->
  <div class="dashboard-content">
    <!-- Left Column: CRM Data -->
    <div class="content-left">
      <!-- Quick Actions Panel -->
      <div class="dashboard-card quick-actions">
        <div class="card-header">
          <h3>Quick Actions</h3>
          <div class="card-actions">
            <button class="btn btn-xs" data-action="refresh-data">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="quick-actions-grid">
          <button class="quick-action" data-action="new-lead">
            <i class="fas fa-user-plus"></i>
            <span>Add Lead</span>
          </button>
          <button class="quick-action" data-action="schedule-followup">
            <i class="fas fa-calendar-plus"></i>
            <span>Schedule</span>
          </button>
          <button class="quick-action" data-action="send-email">
            <i class="fas fa-envelope"></i>
            <span>Send Email</span>
          </button>
          <button class="quick-action" data-action="generate-report">
            <i class="fas fa-chart-bar"></i>
            <span>Report</span>
          </button>
        </div>
      </div>

      <!-- Enhanced Kanban Pipeline -->
      <div class="kanban-pipeline" id="kanbanPipeline">
        <div class="kanban-header">
          <h2>
            <i class="fas fa-columns"></i>
            Sales Pipeline
          </h2>
          <div class="pipeline-controls">
            <div class="pipeline-stats">
              <span class="stat">
                <i class="fas fa-dollar-sign"></i>
                Total Value: <span id="pipelineTotal">{formatCurrency(crmData.leads.reduce((total, lead) => total + lead.value, 0))}</span>
              </span>
              <span class="stat">
                <i class="fas fa-users"></i>
                Leads: <span id="pipelineCount">{crmData.leads.length}</span>
              </span>
            </div>
            <div class="pipeline-filters">
              <select class="form-select" id="pipelineFilter">
                <option value="all">All Leads</option>
                <option value="high">High Priority</option>
                <option value="medium">Medium Priority</option>
                <option value="low">Low Priority</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="kanban-board">
          <div class="kanban-column" data-status="new">
            <div class="column-header">
              <h3>
                <i class="fas fa-plus-circle"></i>
                New Leads
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'new').length}</span>
            </div>
            <div class="kanban-cards" data-status="new">
              {crmData.leads.filter(lead => lead.status === 'new').map(lead => (
                <div class="kanban-card" data-lead-id={lead.id} draggable="true">
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority {getPriorityLevel(lead)}">
                      {getPriorityLevel(lead)} priority
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="assign-lead" data-lead-id={lead.id} title="Assign">
                        <i class="fas fa-user-check"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id} title="Edit">
                        <i class="fas fa-edit"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="kanban-column" data-status="contacted">
            <div class="column-header">
              <h3>
                <i class="fas fa-phone"></i>
                Contacted
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'contacted').length}</span>
            </div>
            <div class="kanban-cards" data-status="contacted">
              {crmData.leads.filter(lead => lead.status === 'contacted').map(lead => (
                <div class="kanban-card" data-lead-id={lead.id} draggable="true">
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority {getPriorityLevel(lead)}">
                      {getPriorityLevel(lead)} priority
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="assign-lead" data-lead-id={lead.id} title="Assign">
                        <i class="fas fa-user-check"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id} title="Edit">
                        <i class="fas fa-edit"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="kanban-column" data-status="qualified">
            <div class="column-header">
              <h3>
                <i class="fas fa-check-circle"></i>
                Qualified
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'qualified').length}</span>
            </div>
            <div class="kanban-cards" data-status="qualified">
              {crmData.leads.filter(lead => lead.status === 'qualified').map(lead => (
                <div class="kanban-card" data-lead-id={lead.id} draggable="true">
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority {getPriorityLevel(lead)}">
                      {getPriorityLevel(lead)} priority
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="convert-lead" data-lead-id={lead.id} title="Convert">
                        <i class="fas fa-handshake"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id} title="Edit">
                        <i class="fas fa-edit"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="kanban-column" data-status="proposal">
            <div class="column-header">
              <h3>
                <i class="fas fa-file-contract"></i>
                Proposal
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'proposal').length}</span>
            </div>
            <div class="kanban-cards" data-status="proposal">
              {crmData.leads.filter(lead => lead.status === 'proposal').map(lead => (
                <div class="kanban-card" data-lead-id={lead.id} draggable="true">
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority {getPriorityLevel(lead)}">
                      {getPriorityLevel(lead)} priority
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="convert-lead" data-lead-id={lead.id} title="Convert">
                        <i class="fas fa-handshake"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id} title="Edit">
                        <i class="fas fa-edit"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="kanban-column" data-status="negotiation">
            <div class="column-header">
              <h3>
                <i class="fas fa-handshake"></i>
                Negotiation
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'negotiation').length}</span>
            </div>
            <div class="kanban-cards" data-status="negotiation">
              {crmData.leads.filter(lead => lead.status === 'negotiation').map(lead => (
                <div class="kanban-card" data-lead-id={lead.id} draggable="true">
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority {getPriorityLevel(lead)}">
                      {getPriorityLevel(lead)} priority
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="convert-lead" data-lead-id={lead.id} title="Convert">
                        <i class="fas fa-handshake"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <button class="btn btn-xs" data-action="edit-lead" data-lead-id={lead.id} title="Edit">
                        <i class="fas fa-edit"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class="kanban-column converted" data-status="converted">
            <div class="column-header">
              <h3>
                <i class="fas fa-trophy"></i>
                Converted
              </h3>
              <span class="column-count">{crmData.leads.filter(l => l.status === 'converted').length}</span>
            </div>
            <div class="kanban-cards" data-status="converted">
              {crmData.leads.filter(lead => lead.status === 'converted').map(lead => (
                <div class="kanban-card converted" data-lead-id={lead.id}>
                  <div class="card-header">
                    <h4>{lead.name}</h4>
                    <span class="card-value">{formatCurrency(lead.value)}</span>
                  </div>
                  <div class="card-details">
                    <p class="service">
                      <i class="fas fa-briefcase"></i>
                      {lead.service}
                    </p>
                    <p class="contact">
                      <i class="fas fa-envelope"></i>
                      {lead.email}
                    </p>
                    <p class="location">
                      <i class="fas fa-map-marker-alt"></i>
                      {lead.city}
                    </p>
                  </div>
                  <div class="card-footer">
                    <div class="card-priority success">
                      <i class="fas fa-check"></i>
                      Client
                    </div>
                    <div class="card-actions">
                      <button class="btn btn-xs" data-action="view-client" data-lead-id={lead.id} title="View Client">
                        <i class="fas fa-user"></i>
                      </button>
                      <button class="btn btn-xs" data-action="email-lead" data-lead-id={lead.id} title="Email">
                        <i class="fas fa-envelope"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Column: Analytics & Visitor Data -->
    <div class="content-right">
      <!-- Visitor Analytics Card -->
      <div class="dashboard-card visitor-analytics">
        <div class="card-header">
          <h3>
            <i class="fas fa-chart-line"></i>
            Visitor Analytics
          </h3>
          <div class="card-actions">
            <select class="form-select-sm" id="visitorTimeRange">
              <option value="today">Today</option>
              <option value="week" selected>This Week</option>
              <option value="month">This Month</option>
            </select>
          </div>
        </div>
        <div class="card-content">
          <div class="visitor-stats">
            <div class="stat-item">
              <div class="stat-number">{crmData.visitors.todayVisitors}</div>
              <div class="stat-label">Today</div>
            </div>
            <div class="stat-item">
              <div class="stat-number">{crmData.visitors.weeklyVisitors}</div>
              <div class="stat-label">This Week</div>
            </div>
            <div class="stat-item">
              <div class="stat-number">{crmData.visitors.monthlyVisitors}</div>
              <div class="stat-label">This Month</div>
            </div>
          </div>
          
          <div class="visitor-chart">
            <h4>Hourly Traffic</h4>
            <div class="chart-bars">
              {crmData.visitors.hourlyData.map(hour => (
                <div class="chart-bar" style={`height: ${(hour.visitors / 20) * 100}%`} title={`${hour.hour}:00 - ${hour.visitors} visitors`}>
                  <span class="bar-value">{hour.visitors}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <!-- Top Sources Card -->
      <div class="dashboard-card top-sources">
        <div class="card-header">
          <h3>
            <i class="fas fa-globe"></i>
            Traffic Sources
          </h3>
        </div>
        <div class="card-content">
          <div class="source-list">
            {crmData.visitors.topSources.map((source, index) => (
              <div class="source-item">
                <div class="source-info">
                  <span class="source-name">{source.source}</span>
                  <span class="source-count">{source.visitors}</span>
                </div>
                <div class="source-bar">
                  <div class="source-fill" style={`width: ${(source.visitors / crmData.visitors.topSources[0].visitors) * 100}%`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Top Pages Card -->
      <div class="dashboard-card top-pages">
        <div class="card-header">
          <h3>
            <i class="fas fa-file-alt"></i>
            Popular Pages
          </h3>
        </div>
        <div class="card-content">
          <div class="page-list">
            {crmData.visitors.topPages.map((page, index) => (
              <div class="page-item">
                <div class="page-info">
                  <span class="page-name">{page.page}</span>
                  <span class="page-views">{page.views} views</span>
                </div>
                <div class="page-bar">
                  <div class="page-fill" style={`width: ${(page.views / crmData.visitors.topPages[0].views) * 100}%`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Top Cities Card -->
      <div class="dashboard-card top-cities">
        <div class="card-header">
          <h3>
            <i class="fas fa-map-marker-alt"></i>
            Top Cities
          </h3>
        </div>
        <div class="card-content">
          <div class="city-list">
            {crmData.visitors.topCities.map((city, index) => (
              <div class="city-item">
                <div class="city-info">
                  <span class="city-name">{city.city}</span>
                  <span class="city-visitors">{city.visitors}</span>
                </div>
                <div class="city-bar">
                  <div class="city-fill" style={`width: ${(city.visitors / crmData.visitors.topCities[0].visitors) * 100}%`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- User Roles Management Card -->
      <div class="dashboard-card user-roles">
        <div class="card-header">
          <h3>
            <i class="fas fa-users-cog"></i>
            User Roles
          </h3>
          <div class="card-actions">
            <button class="btn btn-xs btn-primary" data-action="add-role">
              <i class="fas fa-plus"></i>
              Add Role
            </button>
          </div>
        </div>
        <div class="card-content">
          <div class="roles-list">
            {crmData.userRoles.map(role => (
              <div class="role-item">
                <div class="role-info">
                  <div class="role-name">{role.name}</div>
                  <div class="role-description">{role.description}</div>
                  <div class="role-permissions">
                    {role.permissions.slice(0, 3).map(permission => (
                      <span class="permission-tag">{permission.replace('_', ' ')}</span>
                    ))}
                    {role.permissions.length > 3 && (
                      <span class="permission-tag more">+{role.permissions.length - 3} more</span>
                    )}
                  </div>
                </div>
                <div class="role-actions">
                  <button class="btn btn-xs" data-action="edit-role" data-role-id={role.id} title="Edit Role">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-xs btn-danger" data-action="delete-role" data-role-id={role.id} title="Delete Role">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modals and Forms (will be handled by JavaScript) -->
<div class="modal-overlay" id="crmModal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modalTitle">CRM Action</h3>
      <button class="modal-close" onclick="closeCrmModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body" id="modalBody">
      <!-- Dynamic content will be loaded here -->
    </div>
  </div>
</div>

<style>
  .kps-crm-dashboard {
    min-height: 100vh;
    background: linear-gradient(135deg, #f0f4f7 0%, #f8fafc 100%);
    padding: 1.5rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
  }

  /* Enhanced Header Styles */
  .crm-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.05),
      0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.8);
  }

  .dashboard-title {
    color: #1e3a8a;
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    text-shadow: 0 2px 4px rgba(30, 58, 138, 0.1);
  }

  .dashboard-title i {
    color: #3b82f6;
    filter: drop-shadow(0 2px 4px rgba(59, 130, 246, 0.3));
  }

  .dashboard-subtitle {
    color: #64748b;
    margin: 0;
    font-size: 1.1rem;
    font-weight: 400;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
    flex-wrap: wrap;
  }

  /* Search Container */
  .search-container {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-container i {
    position: absolute;
    left: 1rem;
    color: #64748b;
    z-index: 1;
  }

  .search-input {
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 0.875rem;
    min-width: 250px;
    transition: all 0.2s ease;
    background: white;
  }

  .search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Dropdown */
  .dropdown {
    position: relative;
  }

  .dropdown-toggle {
    background: white !important;
    border: 2px solid #e2e8f0 !important;
    color: #374151 !important;
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 0.5rem 0;
    min-width: 200px;
    z-index: 1000;
    display: none;
  }

  .dropdown-menu.show {
    display: block;
  }

  .dropdown-menu a {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: #374151;
    text-decoration: none;
    transition: background-color 0.2s;
  }

  .dropdown-menu a:hover {
    background: #f8fafc;
  }

  .dropdown-divider {
    height: 1px;
    background: #e2e8f0;
    margin: 0.5rem 0;
  }

  /* Enhanced KPI Grid */
  .kpi-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .kpi-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.05),
      0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .kpi-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--accent-color, #3b82f6), var(--accent-light, #60a5fa));
  }

  .kpi-card:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.1),
      0 4px 6px rgba(0, 0, 0, 0.05);
  }

  .kpi-card.revenue {
    --accent-color: #10b981;
    --accent-light: #34d399;
  }

  .kpi-card.leads {
    --accent-color: #3b82f6;
    --accent-light: #60a5fa;
  }

  .kpi-card.visitors {
    --accent-color: #8b5cf6;
    --accent-light: #a78bfa;
  }

  .kpi-card.clients {
    --accent-color: #f59e0b;
    --accent-light: #fbbf24;
  }

  .kpi-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .kpi-header h3 {
    color: #374151;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0;
  }

  .kpi-header i {
    color: var(--accent-color, #3b82f6);
    font-size: 1.25rem;
    opacity: 0.8;
  }

  .kpi-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0.5rem 0;
    line-height: 1;
  }

  .kpi-metric,
  .kpi-submetric {
    color: #6b7280;
    font-size: 0.875rem;
    margin: 0.25rem 0;
  }

  .kpi-submetric {
    font-size: 0.75rem;
    opacity: 0.8;
  }

  .kpi-change {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .kpi-change.positive {
    color: #10b981;
  }

  .kpi-change.negative {
    color: #ef4444;
  }

  /* Dashboard Content Layout */
  .dashboard-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }

  .content-left,
  .content-right {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  /* Quick Actions Panel */
  .quick-actions {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  }

  .quick-actions-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1rem;
    margin-top: 1rem;
  }

  .quick-action {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    background: #f8fafc;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .quick-action:hover {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
    transform: translateY(-1px);
  }

  .quick-action i {
    font-size: 1.25rem;
  }

  .quick-action span {
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Enhanced Kanban Styles */
  .kanban-pipeline {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  }

  .kanban-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e2e8f0;
  }

  .kanban-header h2 {
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .pipeline-controls {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .pipeline-stats {
    display: flex;
    gap: 1.5rem;
  }

  .stat {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #6b7280;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .stat i {
    color: #3b82f6;
  }

  .kanban-board {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: 1.5rem;
    overflow-x: auto;
    padding-bottom: 1rem;
  }

  .kanban-column {
    min-width: 280px;
    background: #f8fafc;
    border-radius: 12px;
    padding: 1rem;
    border: 2px solid #e2e8f0;
  }

  .kanban-column.converted {
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
    border-color: #10b981;
  }

  .column-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #e2e8f0;
  }

  .column-header h3 {
    color: #374151;
    font-size: 0.875rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .column-count {
    background: #3b82f6;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .kanban-cards {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    min-height: 200px;
  }

  .kanban-card {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
    cursor: move;
    transition: all 0.2s ease;
  }

  .kanban-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  }

  .kanban-card.converted {
    border-color: #10b981;
    background: linear-gradient(135deg, #ffffff 0%, #f0fdf4 100%);
  }

  .kanban-card .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
  }

  .kanban-card h4 {
    color: #1f2937;
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    line-height: 1.2;
  }

  .card-value {
    color: #10b981;
    font-weight: 700;
    font-size: 0.875rem;
  }

  .card-details {
    margin-bottom: 1rem;
  }

  .card-details p {
    margin: 0.5rem 0;
    font-size: 0.75rem;
    color: #6b7280;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .card-details i {
    width: 12px;
    opacity: 0.7;
  }

  .card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    padding-top: 0.75rem;
    border-top: 1px solid #e2e8f0;
  }

  .card-priority {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.625rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .card-priority.high {
    background: #fef2f2;
    color: #dc2626;
  }

  .card-priority.medium {
    background: #fffbeb;
    color: #d97706;
  }

  .card-priority.low {
    background: #f0f9ff;
    color: #0284c7;
  }

  .card-priority.success {
    background: #f0fdf4;
    color: #16a34a;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
  }

  /* Right Column Analytics */
  .dashboard-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 16px;
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.05),
      0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.8);
    overflow: hidden;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .card-header h3 {
    color: #1f2937;
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .card-header i {
    color: #3b82f6;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
  }

  .card-content {
    padding: 1.5rem;
  }

  /* Visitor Analytics */
  .visitor-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .stat-item {
    text-align: center;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 12px;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.75rem;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .visitor-chart h4 {
    color: #374151;
    font-size: 0.875rem;
    font-weight: 600;
    margin: 0 0 1rem;
  }

  .chart-bars {
    display: flex;
    align-items: end;
    gap: 2px;
    height: 60px;
    background: #f8fafc;
    border-radius: 8px;
    padding: 0.5rem;
  }

  .chart-bar {
    flex: 1;
    background: linear-gradient(to top, #3b82f6, #60a5fa);
    border-radius: 2px;
    position: relative;
    min-height: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .chart-bar:hover {
    opacity: 0.8;
  }

  .bar-value {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.625rem;
    color: #6b7280;
    background: rgba(255, 255, 255, 0.9);
    padding: 0.125rem 0.25rem;
    border-radius: 4px;
    opacity: 0;
    transition: opacity 0.2s;
  }

  .chart-bar:hover .bar-value {
    opacity: 1;
  }

  /* Source/Page/City Lists */
  .source-list,
  .page-list,
  .city-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .source-item,
  .page-item,
  .city-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .source-info,
  .page-info,
  .city-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .source-name,
  .page-name,
  .city-name {
    color: #374151;
    font-weight: 500;
    font-size: 0.875rem;
  }

  .source-count,
  .page-views,
  .city-visitors {
    color: #6b7280;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .source-bar,
  .page-bar,
  .city-bar {
    height: 4px;
    background: #e2e8f0;
    border-radius: 2px;
    overflow: hidden;
  }

  .source-fill,
  .page-fill,
  .city-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
    border-radius: 2px;
    transition: width 0.3s ease;
  }

  /* User Roles */
  .roles-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .role-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .role-info {
    flex: 1;
  }

  .role-name {
    color: #1f2937;
    font-weight: 600;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .role-description {
    color: #6b7280;
    font-size: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .role-permissions {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .permission-tag {
    background: #dbeafe;
    color: #1e40af;
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    font-size: 0.625rem;
    font-weight: 500;
    text-transform: capitalize;
  }

  .permission-tag.more {
    background: #f3f4f6;
    color: #6b7280;
  }

  .role-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  /* Button Styles */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: 2px solid transparent;
    border-radius: 12px;
    font-size: 0.875rem;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .btn:hover {
    transform: translateY(-1px);
  }

  .btn-primary {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
  }

  .btn-success {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
  }

  .btn-success:hover {
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
    box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
  }

  .btn-info {
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
    color: white;
  }

  .btn-info:hover {
    background: linear-gradient(135deg, #0891b2 0%, #0e7490 100%);
    box-shadow: 0 4px 15px rgba(6, 182, 212, 0.4);
  }

  .btn-secondary {
    background: white;
    color: #374151;
    border-color: #d1d5db;
  }

  .btn-secondary:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .btn-danger {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    color: white;
  }

  .btn-danger:hover {
    background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    box-shadow: 0 4px 15px rgba(239, 68, 68, 0.4);
  }

  .btn-xs {
    padding: 0.5rem;
    font-size: 0.75rem;
    border-radius: 8px;
  }

  .form-select,
  .form-select-sm {
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    cursor: pointer;
    transition: border-color 0.2s;
  }

  .form-select-sm {
    padding: 0.5rem;
    font-size: 0.75rem;
  }

  .form-select:focus,
  .form-select-sm:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .dashboard-content {
      grid-template-columns: 1fr;
    }

    .kanban-board {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 768px) {
    .kps-crm-dashboard {
      padding: 1rem;
    }

    .crm-header {
      flex-direction: column;
      gap: 1rem;
    }

    .header-actions {
      width: 100%;
      justify-content: flex-start;
    }

    .search-input {
      min-width: 200px;
    }

    .kpi-grid {
      grid-template-columns: 1fr;
    }

    .quick-actions-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .kanban-board {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .pipeline-controls {
      flex-direction: column;
      gap: 1rem;
    }

    .visitor-stats {
      grid-template-columns: 1fr;
    }
  }

  /* Animation and transitions */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .dashboard-card,
  .kpi-card,
  .kanban-card {
    animation: fadeIn 0.3s ease-out;
  }

  /* Drag and drop styles */
  .kanban-card.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
  }

  .kanban-column.drag-over {
    background: #eff6ff;
    border-color: #3b82f6;
  }

  /* Loading states */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // Enhanced CRM Dashboard functionality
  
  // Global search functionality
  const globalSearch = document.getElementById('globalSearch');
  if (globalSearch) {
    globalSearch.addEventListener('input', function(e) {
      const query = e.target.value.toLowerCase();
      
      // Search in kanban cards
      const kanbanCards = document.querySelectorAll('.kanban-card');
      kanbanCards.forEach(card => {
        const text = card.textContent.toLowerCase();
        const isVisible = text.includes(query);
        card.style.display = isVisible ? 'block' : 'none';
        
        // Add highlight effect for visible cards
        if (isVisible && query.length > 0) {
          card.classList.add('search-highlight');
        } else {
          card.classList.remove('search-highlight');
        }
      });
      
      // Update column counts after filtering
      updateColumnCounts();
    });
  }

  // Dropdown functionality
  const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
  dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', function(e) {
      e.preventDefault();
      const dropdown = this.nextElementSibling;
      const isOpen = dropdown.classList.contains('show');
      
      // Close all dropdowns
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });
      
      // Toggle current dropdown
      if (!isOpen) {
        dropdown.classList.add('show');
      }
    });
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.dropdown')) {
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });
    }
  });

  // Enhanced drag and drop for kanban
  let draggedCard = null;
  
  // Make cards draggable
  const kanbanCards = document.querySelectorAll('.kanban-card[draggable="true"]');
  kanbanCards.forEach(card => {
    card.addEventListener('dragstart', function(e) {
      draggedCard = this;
      this.classList.add('dragging');
      e.dataTransfer.effectAllowed = 'move';
    });
    
    card.addEventListener('dragend', function() {
      this.classList.remove('dragging');
      document.querySelectorAll('.kanban-column').forEach(col => {
        col.classList.remove('drag-over');
      });
    });
  });

  // Handle drop zones
  const kanbanColumns = document.querySelectorAll('.kanban-cards');
  kanbanColumns.forEach(column => {
    column.addEventListener('dragover', function(e) {
      e.preventDefault();
      this.closest('.kanban-column').classList.add('drag-over');
    });
    
    column.addEventListener('dragleave', function() {
      this.closest('.kanban-column').classList.remove('drag-over');
    });
    
    column.addEventListener('drop', function(e) {
      e.preventDefault();
      const newStatus = this.dataset.status;
      
      if (draggedCard && newStatus) {
        // Move card to new column
        this.appendChild(draggedCard);
        
        // Update lead status via API
        const leadId = draggedCard.dataset.leadId;
        updateLeadStatus(leadId, newStatus);
        
        // Update UI
        updateColumnCounts();
        updatePipelineStats();
      }
      
      this.closest('.kanban-column').classList.remove('drag-over');
    });
  });

  // Enhanced button actions
  document.addEventListener('click', function(e) {
    const action = e.target.closest('[data-action]')?.dataset.action;
    if (!action) return;

    e.preventDefault();

    switch (action) {
      case 'new-lead':
        showNewLeadModal();
        break;
      case 'new-client':
        showNewClientModal();
        break;
      case 'manage-users':
        showUserRolesModal();
        break;
      case 'refresh-data':
        refreshDashboardData();
        break;
      case 'toggle-kanban':
        toggleKanbanView();
        break;
      case 'send-bulk-emails':
        showBulkEmailModal();
        break;
      case 'export-data':
        exportData();
        break;
      case 'import-data':
        showImportModal();
        break;
      case 'settings':
        showSettingsModal();
        break;
      case 'add-role':
        showAddRoleModal();
        break;
      case 'edit-role':
        const roleId = e.target.closest('[data-role-id]')?.dataset.roleId;
        showEditRoleModal(roleId);
        break;
      case 'delete-role':
        const deleteRoleId = e.target.closest('[data-role-id]')?.dataset.roleId;
        deleteRole(deleteRoleId);
        break;
      case 'assign-lead':
        const assignLeadId = e.target.closest('[data-lead-id]')?.dataset.leadId;
        showAssignLeadModal(assignLeadId);
        break;
      case 'email-lead':
        const emailLeadId = e.target.closest('[data-lead-id]')?.dataset.leadId;
        showEmailLeadModal(emailLeadId);
        break;
      case 'edit-lead':
        const editLeadId = e.target.closest('[data-lead-id]')?.dataset.leadId;
        showEditLeadModal(editLeadId);
        break;
      case 'convert-lead':
        const convertLeadId = e.target.closest('[data-lead-id]')?.dataset.leadId;
        showConvertLeadModal(convertLeadId);
        break;
      case 'view-client':
        const clientId = e.target.closest('[data-lead-id]')?.dataset.leadId;
        showClientDetails(clientId);
        break;
      case 'schedule-followup':
        showScheduleFollowupModal();
        break;
      case 'send-email':
        showEmailModal();
        break;
      case 'generate-report':
        generateReport();
        break;
    }
  });

  // Pipeline filter functionality
  const pipelineFilter = document.getElementById('pipelineFilter');
  if (pipelineFilter) {
    pipelineFilter.addEventListener('change', function() {
      const filterValue = this.value;
      const kanbanCards = document.querySelectorAll('.kanban-card');
      
      kanbanCards.forEach(card => {
        if (filterValue === 'all') {
          card.style.display = 'block';
        } else {
          const priority = card.querySelector('.card-priority')?.classList;
          const shouldShow = priority && priority.contains(filterValue);
          card.style.display = shouldShow ? 'block' : 'none';
        }
      });
      
      updateColumnCounts();
    });
  }

  // Visitor time range filter
  const visitorTimeRange = document.getElementById('visitorTimeRange');
  if (visitorTimeRange) {
    visitorTimeRange.addEventListener('change', function() {
      const timeRange = this.value;
      updateVisitorData(timeRange);
    });
  }

  // Real-time data updates
  setInterval(refreshDashboardData, 30000); // Refresh every 30 seconds

  // Helper functions
  function updateColumnCounts() {
    const columns = document.querySelectorAll('.kanban-column');
    columns.forEach(column => {
      const visibleCards = column.querySelectorAll('.kanban-card:not([style*="display: none"])').length;
      const countElement = column.querySelector('.column-count');
      if (countElement) {
        countElement.textContent = visibleCards;
      }
    });
  }

  function updatePipelineStats() {
    const visibleCards = document.querySelectorAll('.kanban-card:not([style*="display: none"])');
    let totalValue = 0;
    let totalCount = visibleCards.length;
    
    visibleCards.forEach(card => {
      const valueText = card.querySelector('.card-value')?.textContent;
      if (valueText) {
        const value = parseFloat(valueText.replace(/[$,]/g, '')) || 0;
        totalValue += value;
      }
    });
    
    const pipelineTotalElement = document.getElementById('pipelineTotal');
    const pipelineCountElement = document.getElementById('pipelineCount');
    
    if (pipelineTotalElement) {
      pipelineTotalElement.textContent = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(totalValue);
    }
    
    if (pipelineCountElement) {
      pipelineCountElement.textContent = totalCount;
    }
  }

  async function updateLeadStatus(leadId, newStatus) {
    try {
      const response = await fetch('/api/analytics', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'update_lead_status',
          leadId: leadId,
          status: newStatus
        })
      });
      
      if (response.ok) {
        showNotification('Lead status updated successfully', 'success');
      } else {
        throw new Error('Failed to update lead status');
      }
    } catch (error) {
      console.error('Error updating lead status:', error);
      showNotification('Failed to update lead status', 'error');
    }
  }

  async function refreshDashboardData() {
    try {
      const refreshBtn = document.querySelector('[data-action="refresh-data"]');
      if (refreshBtn) {
        refreshBtn.classList.add('loading');
      }
      
      const response = await fetch('/api/analytics?type=dashboard&refresh=true');
      const data = await response.json();
      
      if (data.success) {
        // Update KPI values
        updateKPIs(data.data.kpis);
        
        // Update visitor analytics
        updateVisitorAnalytics(data.data.visitors);
        
        showNotification('Dashboard data refreshed', 'success');
      } else {
        throw new Error('Failed to refresh data');
      }
    } catch (error) {
      console.error('Error refreshing data:', error);
      showNotification('Failed to refresh data', 'error');
    } finally {
      const refreshBtn = document.querySelector('[data-action="refresh-data"]');
      if (refreshBtn) {
        refreshBtn.classList.remove('loading');
      }
    }
  }

  function updateKPIs(kpis) {
    // Update KPI values with smooth animation
    const kpiValues = {
      revenue: kpis.totalRevenue,
      leads: kpis.totalLeads,
      clients: kpis.activeClients,
      conversions: kpis.totalConversions
    };
    
    Object.entries(kpiValues).forEach(([key, value]) => {
      const element = document.querySelector(`.kpi-card.${key} .kpi-value`);
      if (element) {
        animateValue(element, value, key === 'revenue');
      }
    });
  }

  function animateValue(element, targetValue, isCurrency = false) {
    const startValue = parseFloat(element.textContent.replace(/[$,]/g, '')) || 0;
    const duration = 1000;
    const startTime = performance.now();
    
    function update(currentTime) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      const current = startValue + (targetValue - startValue) * progress;
      
      if (isCurrency) {
        element.textContent = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(current);
      } else {
        element.textContent = Math.round(current).toLocaleString();
      }
      
      if (progress < 1) {
        requestAnimationFrame(update);
      }
    }
    
    requestAnimationFrame(update);
  }

  function updateVisitorAnalytics(visitors) {
    // Update visitor stats
    const stats = ['todayVisitors', 'weeklyVisitors', 'monthlyVisitors'];
    stats.forEach(stat => {
      const elements = document.querySelectorAll(`[data-stat="${stat}"]`);
      elements.forEach(element => {
        element.textContent = visitors[stat]?.toLocaleString() || '0';
      });
    });
    
    // Update charts and lists would go here
  }

  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Modal functions (simplified versions)
  function showNewLeadModal() {
    showNotification('New Lead modal would open here', 'info');
  }

  function showNewClientModal() {
    showNotification('New Client modal would open here', 'info');
  }

  function showUserRolesModal() {
    showNotification('User Roles management modal would open here', 'info');
  }

  function toggleKanbanView() {
    const kanbanPipeline = document.getElementById('kanbanPipeline');
    if (kanbanPipeline) {
      const isVisible = kanbanPipeline.style.display !== 'none';
      kanbanPipeline.style.display = isVisible ? 'none' : 'block';
      
      const toggleBtn = document.querySelector('[data-action="toggle-kanban"]');
      if (toggleBtn) {
        toggleBtn.textContent = isVisible ? 'Show Pipeline' : 'Hide Pipeline';
      }
    }
  }

  function showBulkEmailModal() {
    showNotification('Bulk Email modal would open here', 'info');
  }

  function exportData() {
    showNotification('Data export started', 'success');
  }

  function showImportModal() {
    showNotification('Import modal would open here', 'info');
  }

  function showSettingsModal() {
    showNotification('Settings modal would open here', 'info');
  }

  function showAddRoleModal() {
    showNotification('Add Role modal would open here', 'info');
  }

  function showEditRoleModal(roleId) {
    showNotification(`Edit Role ${roleId} modal would open here`, 'info');
  }

  function deleteRole(roleId) {
    if (confirm('Are you sure you want to delete this role?')) {
      showNotification(`Role ${roleId} deleted`, 'success');
    }
  }

  function showAssignLeadModal(leadId) {
    showNotification(`Assign Lead ${leadId} modal would open here`, 'info');
  }

  function showEmailLeadModal(leadId) {
    showNotification(`Email Lead ${leadId} modal would open here`, 'info');
  }

  function showEditLeadModal(leadId) {
    showNotification(`Edit Lead ${leadId} modal would open here`, 'info');
  }

  function showConvertLeadModal(leadId) {
    showNotification(`Convert Lead ${leadId} modal would open here`, 'info');
  }

  function showClientDetails(clientId) {
    showNotification(`Client ${clientId} details would open here`, 'info');
  }

  function showScheduleFollowupModal() {
    showNotification('Schedule Followup modal would open here', 'info');
  }

  function showEmailModal() {
    showNotification('Email modal would open here', 'info');
  }

  function generateReport() {
    showNotification('Generating report...', 'info');
  }

  function updateVisitorData(timeRange) {
    showNotification(`Updating visitor data for ${timeRange}`, 'info');
  }

  // Initialize dashboard
  updateColumnCounts();
  updatePipelineStats();
  
  console.log('Enhanced CRM Dashboard initialized successfully');
});
</script>
