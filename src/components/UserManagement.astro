---
// User Management Component for CRM
const {
  enableUserCreation = true,
  enableUserEdit = true,
  enableUserDeactivation = true
} = Astro.props as {
  enableUserCreation?: boolean;
  enableUserEdit?: boolean;
  enableUserDeactivation?: boolean;
};
---

<div class="user-management-container bg-white rounded-lg shadow-lg p-6">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900">User Management</h2>
    {enableUserCreation && (
      <button 
        id="add-user-btn"
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add User
      </button>
    )}
  </div>

  <!-- Filters and Search -->
  <div class="flex flex-wrap gap-4 mb-6">
    <div class="flex-1 min-w-64">
      <input 
        type="text" 
        id="user-search"
        placeholder="Search users by name, email, or username..."
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>
    <select 
      id="role-filter"
      class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    >
      <option value="">All Roles</option>
      <option value="admin">Admin</option>
      <option value="manager">Manager</option>
      <option value="user">User</option>
      <option value="viewer">Viewer</option>
    </select>
    <select 
      id="status-filter"
      class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    >
      <option value="active">Active Only</option>
      <option value="all">All Users</option>
      <option value="inactive">Inactive Only</option>
    </select>
  </div>

  <!-- Users Table -->
  <div class="overflow-x-auto">
    <table class="w-full table-auto">
      <thead class="bg-gray-50">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Department</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody id="users-table-body" class="bg-white divide-y divide-gray-200">
        <!-- Users will be loaded here -->
      </tbody>
    </table>
  </div>

  <!-- Loading State -->
  <div id="loading-state" class="text-center py-8">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    <p class="mt-2 text-gray-600">Loading users...</p>
  </div>

  <!-- Empty State -->
  <div id="empty-state" class="text-center py-8 hidden">
    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
    </svg>
    <h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
    <p class="mt-1 text-sm text-gray-500">Get started by adding a new user.</p>
  </div>
</div>

<!-- Add/Edit User Modal -->
<div id="user-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex justify-between items-center mb-4">
        <h3 id="modal-title" class="text-lg font-medium text-gray-900">Add New User</h3>
        <button id="close-modal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="user-form" class="space-y-4">
        <input type="hidden" id="user-id" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="first_name" class="block text-sm font-medium text-gray-700 mb-1">First Name *</label>
            <input 
              type="text" 
              id="first_name" 
              name="first_name" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label for="last_name" class="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>
            <input 
              type="text" 
              id="last_name" 
              name="last_name" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username *</label>
            <input 
              type="text" 
              id="username" 
              name="username" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email *</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password *</label>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
            <input 
              type="tel" 
              id="phone" 
              name="phone"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="role" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <select 
              id="role" 
              name="role"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="user">User</option>
              <option value="manager">Manager</option>
              <option value="admin">Admin</option>
              <option value="viewer">Viewer</option>
            </select>
          </div>
          
          <div>
            <label for="department" class="block text-sm font-medium text-gray-700 mb-1">Department</label>
            <input 
              type="text" 
              id="department" 
              name="department"
              placeholder="e.g., Sales, IT, HR"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div class="flex justify-end space-x-3 pt-4">
          <button 
            type="button" 
            id="cancel-btn"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            id="save-btn"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            Save User
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  .user-management-container {
    max-width: 100%;
    overflow-x: auto;
  }

  .status-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .status-active {
    @apply bg-green-100 text-green-800;
  }

  .status-inactive {
    @apply bg-red-100 text-red-800;
  }

  .role-badge {
    @apply inline-flex items-center px-2 py-1 rounded text-xs font-medium;
  }

  .role-admin {
    @apply bg-purple-100 text-purple-800;
  }

  .role-manager {
    @apply bg-blue-100 text-blue-800;
  }

  .role-user {
    @apply bg-gray-100 text-gray-800;
  }

  .role-viewer {
    @apply bg-yellow-100 text-yellow-800;
  }
</style>

<script>
  class UserManagement {
    constructor() {
      this.users = [];
      this.filteredUsers = [];
      this.currentUser = null;
      this.isEditing = false;
      
      this.initializeEventListeners();
      this.loadUsers();
    }

    initializeEventListeners() {
      // Add user button
      document.getElementById('add-user-btn')?.addEventListener('click', () => {
        this.openUserModal();
      });

      // Close modal
      document.getElementById('close-modal')?.addEventListener('click', () => {
        this.closeUserModal();
      });

      document.getElementById('cancel-btn')?.addEventListener('click', () => {
        this.closeUserModal();
      });

      // Form submission
      document.getElementById('user-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.saveUser();
      });

      // Search and filters
      document.getElementById('user-search')?.addEventListener('input', (e) => {
        this.filterUsers();
      });

      document.getElementById('role-filter')?.addEventListener('change', () => {
        this.filterUsers();
      });

      document.getElementById('status-filter')?.addEventListener('change', () => {
        this.loadUsers();
      });

      // Close modal when clicking outside
      document.getElementById('user-modal')?.addEventListener('click', (e) => {
        if (e.target.id === 'user-modal') {
          this.closeUserModal();
        }
      });
    }

    async loadUsers() {
      try {
        this.showLoading(true);
        
        const statusFilter = document.getElementById('status-filter')?.value;
        const includeInactive = statusFilter === 'all' || statusFilter === 'inactive';
        
        const url = `/api/users?include_inactive=${includeInactive}`;
        const response = await fetch(url);
        const data = await response.json();

        if (data.success) {
          this.users = data.users;
          
          // Apply status filter for inactive only
          if (statusFilter === 'inactive') {
            this.users = this.users.filter(user => !user.is_active);
          }
          
          this.filterUsers();
        } else {
          this.showError('Failed to load users: ' + data.error);
        }
      } catch (error) {
        console.error('Error loading users:', error);
        this.showError('Failed to load users');
      } finally {
        this.showLoading(false);
      }
    }

    filterUsers() {
      const searchTerm = document.getElementById('user-search')?.value.toLowerCase() || '';
      const roleFilter = document.getElementById('role-filter')?.value || '';

      this.filteredUsers = this.users.filter(user => {
        const matchesSearch = !searchTerm || 
          user.first_name.toLowerCase().includes(searchTerm) ||
          user.last_name.toLowerCase().includes(searchTerm) ||
          user.email.toLowerCase().includes(searchTerm) ||
          user.username.toLowerCase().includes(searchTerm);

        const matchesRole = !roleFilter || user.role === roleFilter;

        return matchesSearch && matchesRole;
      });

      this.renderUsers();
    }

    renderUsers() {
      const tbody = document.getElementById('users-table-body');
      const emptyState = document.getElementById('empty-state');
      
      if (!tbody) return;

      if (this.filteredUsers.length === 0) {
        tbody.innerHTML = '';
        emptyState?.classList.remove('hidden');
        return;
      }

      emptyState?.classList.add('hidden');

      tbody.innerHTML = this.filteredUsers.map(user => `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-10 w-10">
                <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                  <span class="text-sm font-medium text-gray-700">
                    ${user.first_name.charAt(0)}${user.last_name.charAt(0)}
                  </span>
                </div>
              </div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900">
                  ${user.first_name} ${user.last_name}
                </div>
                <div class="text-sm text-gray-500">${user.email}</div>
                <div class="text-xs text-gray-400">@${user.username}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="role-badge role-${user.role}">${user.role}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${user.department || '-'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="status-badge ${user.is_active ? 'status-active' : 'status-inactive'}">
              ${user.is_active ? 'Active' : 'Inactive'}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${user.last_login ? new Date(user.last_login).toLocaleDateString() : 'Never'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
            <button 
              onclick="userManager.editUser(${user.id})"
              class="text-blue-600 hover:text-blue-900"
            >
              Edit
            </button>
            ${user.is_active ? `
              <button 
                onclick="userManager.deactivateUser(${user.id})"
                class="text-red-600 hover:text-red-900"
              >
                Deactivate
              </button>
            ` : `
              <button 
                onclick="userManager.activateUser(${user.id})"
                class="text-green-600 hover:text-green-900"
              >
                Activate
              </button>
            `}
          </td>
        </tr>
      `).join('');
    }

    openUserModal(user = null) {
      this.currentUser = user;
      this.isEditing = !!user;
      
      const modal = document.getElementById('user-modal');
      const title = document.getElementById('modal-title');
      const form = document.getElementById('user-form');
      
      if (this.isEditing && user) {
        title.textContent = 'Edit User';
        this.populateForm(user);
        // Make password optional for editing
        document.getElementById('password').required = false;
        document.getElementById('password').placeholder = 'Leave blank to keep current password';
      } else {
        title.textContent = 'Add New User';
        form?.reset();
        document.getElementById('password').required = true;
        document.getElementById('password').placeholder = '';
      }
      
      modal?.classList.remove('hidden');
    }

    closeUserModal() {
      const modal = document.getElementById('user-modal');
      modal?.classList.add('hidden');
      
      const form = document.getElementById('user-form');
      form?.reset();
      
      this.currentUser = null;
      this.isEditing = false;
    }

    populateForm(user) {
      document.getElementById('user-id').value = user.id;
      document.getElementById('first_name').value = user.first_name;
      document.getElementById('last_name').value = user.last_name;
      document.getElementById('username').value = user.username;
      document.getElementById('email').value = user.email;
      document.getElementById('phone').value = user.phone || '';
      document.getElementById('role').value = user.role;
      document.getElementById('department').value = user.department || '';
    }

    async saveUser() {
      try {
        const form = document.getElementById('user-form');
        const formData = new FormData(form);
        const userData = Object.fromEntries(formData.entries());

        // Remove empty password for updates
        if (this.isEditing && !userData.password) {
          delete userData.password;
        }

        const url = this.isEditing ? `/api/users/${this.currentUser.id}` : '/api/users';
        const method = this.isEditing ? 'PUT' : 'POST';

        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData)
        });

        const data = await response.json();

        if (data.success) {
          this.showSuccess(this.isEditing ? 'User updated successfully' : 'User created successfully');
          this.closeUserModal();
          this.loadUsers();
        } else {
          this.showError(data.error);
        }
      } catch (error) {
        console.error('Error saving user:', error);
        this.showError('Failed to save user');
      }
    }

    async editUser(userId) {
      try {
        const response = await fetch(`/api/users/${userId}`);
        const data = await response.json();

        if (data.success) {
          this.openUserModal(data.user);
        } else {
          this.showError('Failed to load user data');
        }
      } catch (error) {
        console.error('Error loading user:', error);
        this.showError('Failed to load user data');
      }
    }

    async deactivateUser(userId) {
      if (!confirm('Are you sure you want to deactivate this user?')) {
        return;
      }

      try {
        const response = await fetch(`/api/users/${userId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ permanent: false })
        });

        const data = await response.json();

        if (data.success) {
          this.showSuccess('User deactivated successfully');
          this.loadUsers();
        } else {
          this.showError(data.error);
        }
      } catch (error) {
        console.error('Error deactivating user:', error);
        this.showError('Failed to deactivate user');
      }
    }

    async activateUser(userId) {
      try {
        const response = await fetch(`/api/users/${userId}/activate`, {
          method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
          this.showSuccess('User activated successfully');
          this.loadUsers();
        } else {
          this.showError(data.error);
        }
      } catch (error) {
        console.error('Error activating user:', error);
        this.showError('Failed to activate user');
      }
    }

    showLoading(show) {
      const loadingState = document.getElementById('loading-state');
      if (show) {
        loadingState?.classList.remove('hidden');
      } else {
        loadingState?.classList.add('hidden');
      }
    }

    showSuccess(message) {
      // You can implement a toast notification system here
      alert(message);
    }

    showError(message) {
      // You can implement a toast notification system here
      alert('Error: ' + message);
    }
  }

  // Initialize user management when DOM is loaded
  let userManager;
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      userManager = new UserManagement();
    });
  } else {
    userManager = new UserManagement();
  }
</script>
