---
// Simple Login Component for User Authentication
const {
  title = "Login to KPS CRM",
  subtitle = "Enter your credentials to access the system"
} = Astro.props as {
  title?: string;
  subtitle?: string;
};
---

<div class="login-container">
  <div class="login-card">
    <div class="login-header">
      <h2 class="login-title">{title}</h2>
      <p class="login-subtitle">{subtitle}</p>
    </div>

    <form id="login-form" class="login-form">
      <div class="form-group">
        <label for="identifier" class="form-label">Username or Email</label>
        <input 
          type="text" 
          id="identifier" 
          name="identifier" 
          required
          class="form-input"
          placeholder="Enter your username or email"
          autocomplete="username"
        />
      </div>

      <div class="form-group">
        <label for="password" class="form-label">Password</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required
          class="form-input"
          placeholder="Enter your password"
          autocomplete="current-password"
        />
      </div>

      <button type="submit" class="login-button" id="login-btn">
        <span class="btn-text">Login</span>
        <div class="loading-spinner hidden">
          <svg class="animate-spin h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </div>
      </button>
    </form>

    <div id="error-message" class="error-message hidden">
      <i class="fas fa-exclamation-triangle"></i>
      <span class="error-text"></span>
    </div>

    <div id="success-message" class="success-message hidden">
      <i class="fas fa-check-circle"></i>
      <span class="success-text"></span>
    </div>
  </div>
</div>

<style>
  .login-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
  }

  .login-card {
    background: white;
    border-radius: 16px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    padding: 3rem;
    width: 100%;
    max-width: 400px;
  }

  .login-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .login-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 0.5rem;
  }

  .login-subtitle {
    color: #6b7280;
    margin: 0;
    font-size: 1rem;
  }

  .login-form {
    space-y: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .form-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    background: white;
  }

  .form-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .login-button {
    width: 100%;
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.875rem 1rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.15s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .login-button:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
    transform: translateY(-1px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .login-button:active {
    transform: translateY(0);
  }

  .login-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .loading-spinner {
    display: none;
  }

  .loading-spinner.show {
    display: block;
  }

  .hidden {
    display: none;
  }

  .error-message, .success-message {
    margin-top: 1rem;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .error-message {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  .success-message {
    background: #f0fdf4;
    color: #16a34a;
    border: 1px solid #bbf7d0;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Responsive */
  @media (max-width: 640px) {
    .login-card {
      padding: 2rem;
      margin: 1rem;
    }

    .login-title {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  class LoginForm {
    constructor() {
      this.form = document.getElementById('login-form') as HTMLFormElement;
      this.loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
      this.errorMessage = document.getElementById('error-message') as HTMLElement;
      this.successMessage = document.getElementById('success-message') as HTMLElement;
      this.loadingSpinner = this.loginBtn?.querySelector('.loading-spinner') as HTMLElement;
      this.btnText = this.loginBtn?.querySelector('.btn-text') as HTMLElement;

      this.initializeEventListeners();
    }

    initializeEventListeners() {
      this.form?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleLogin();
      });

      // Auto-focus first input
      const firstInput = this.form?.querySelector('input') as HTMLInputElement;
      firstInput?.focus();
    }

    async handleLogin() {
      const formData = new FormData(this.form);
      const identifier = formData.get('identifier') as string;
      const password = formData.get('password') as string;

      if (!identifier || !password) {
        this.showError('Please fill in all fields');
        return;
      }

      this.setLoading(true);
      this.hideMessages();

      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            identifier,
            password
          })
        });

        const data = await response.json();

        if (data.success) {
          this.showSuccess('Login successful! Redirecting...');
          
          // Store user info in session storage
          sessionStorage.setItem('user', JSON.stringify(data.user));
          
          // Redirect to CRM dashboard
          setTimeout(() => {
            window.location.href = '/crm';
          }, 1000);
        } else {
          this.showError(data.error || 'Login failed');
        }
      } catch (error) {
        console.error('Login error:', error);
        this.showError('Connection error. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading: boolean) {
      if (this.loginBtn) {
        this.loginBtn.disabled = loading;
      }
      
      if (loading) {
        this.btnText?.classList.add('hidden');
        this.loadingSpinner?.classList.remove('hidden');
        this.loadingSpinner?.classList.add('show');
      } else {
        this.btnText?.classList.remove('hidden');
        this.loadingSpinner?.classList.add('hidden');
        this.loadingSpinner?.classList.remove('show');
      }
    }

    showError(message: string) {
      this.hideMessages();
      if (this.errorMessage) {
        const errorText = this.errorMessage.querySelector('.error-text') as HTMLElement;
        if (errorText) {
          errorText.textContent = message;
        }
        this.errorMessage.classList.remove('hidden');
      }
    }

    showSuccess(message: string) {
      this.hideMessages();
      if (this.successMessage) {
        const successText = this.successMessage.querySelector('.success-text') as HTMLElement;
        if (successText) {
          successText.textContent = message;
        }
        this.successMessage.classList.remove('hidden');
      }
    }

    hideMessages() {
      this.errorMessage?.classList.add('hidden');
      this.successMessage?.classList.add('hidden');
    }
  }

  // Initialize login form when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new LoginForm();
    });
  } else {
    new LoginForm();
  }
</script>
