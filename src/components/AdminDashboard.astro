---
// KPS Group Admin Dashboard - Integrated CRM Management Interface
// Comprehensive administrative control panel for business operations

interface Props {
  user?: {
    id: string;
    name: string;
    email: string;
    role: string;
    avatar?: string;
    lastLogin?: string;
  };
  className?: string;
}

const { user, className = "" } = Astro.props;

const dashboardId = `kps-admin-dashboard-${crypto.randomUUID().substring(0, 8)}`;

// Mock data for demonstration - will be replaced with real API calls
const analyticsData = {
  overview: {
    totalLeads: 247,
    totalConversions: 45,
    conversionRate: 18.2,
    totalRevenue: 284500,
    avgDealSize: 6322,
    activeClients: 45,
    monthlyGrowth: 12.5,
    lastUpdated: new Date().toISOString()
  },
  
  leadSources: [
    { source: 'Business Assessment', leads: 89, conversions: 23, rate: 25.8, revenue: 145000 },
    { source: 'Contact Form', leads: 67, conversions: 12, rate: 17.9, revenue: 75000 },
    { source: 'Pricing Calculator', leads: 45, conversions: 7, rate: 15.6, revenue: 42000 },
    { source: 'FAQ Interactions', leads: 28, conversions: 2, rate: 7.1, revenue: 12500 },
    { source: 'Testimonial Views', leads: 18, conversions: 1, rate: 5.6, revenue: 10000 }
  ],

  cityPerformance: [
    { city: 'Austin', state: 'TX', leads: 52, conversions: 12, revenue: 95000, opportunity: 'high' },
    { city: 'Houston', state: 'TX', leads: 38, conversions: 8, revenue: 62000, opportunity: 'high' },
    { city: 'Dallas', state: 'TX', leads: 41, conversions: 6, revenue: 45000, opportunity: 'medium' },
    { city: 'San Antonio', state: 'TX', leads: 29, conversions: 4, revenue: 28000, opportunity: 'medium' }
  ],

  servicePerformance: [
    { service: 'QuickBooks Implementation', inquiries: 78, conversions: 22, rate: 28.2, avgPrice: 8500 },
    { service: 'Bookkeeping Services', inquiries: 65, conversions: 18, rate: 27.7, avgPrice: 1200 },
    { service: 'Payroll Management', inquiries: 34, conversions: 8, rate: 23.5, avgPrice: 850 },
    { service: 'Technology Consulting', inquiries: 28, conversions: 5, rate: 17.9, avgPrice: 12000 }
  ],

  recentActivity: [
    { id: 1, type: 'new-lead', user: 'Sarah Johnson', company: 'ABC Manufacturing', location: 'Austin, TX', value: '$15,000 assessment', score: 95, timestamp: new Date(Date.now() - 120000) },
    { id: 2, type: 'deal-won', user: 'Mike Chen', company: 'XYZ Corp', location: 'Houston, TX', value: '$25,000 QB implementation', score: 100, timestamp: new Date(Date.now() - 3600000) },
    { id: 3, type: 'email-opened', user: 'Jennifer Smith', company: 'Tech Solutions Inc', location: 'Dallas, TX', value: 'Follow-up sequence', score: 78, timestamp: new Date(Date.now() - 7200000) },
    { id: 4, type: 'assessment', user: 'Robert Wilson', company: 'Green Energy LLC', location: 'San Antonio, TX', value: '$8,500 consultation', score: 82, timestamp: new Date(Date.now() - 10800000) }
  ]
};

// Helper functions for dashboard display
function getActivityIcon(type: string) {
  const icons = {
    'new-lead': 'fas fa-user-plus',
    'deal-won': 'fas fa-handshake',
    'email-opened': 'fas fa-envelope-open',
    'assessment': 'fas fa-clipboard-check',
    'form': 'fas fa-file-alt',
    'pricing': 'fas fa-calculator',
    'contact': 'fas fa-phone',
    'email': 'fas fa-envelope',
    'default': 'fas fa-circle'
  };
  return icons[type as keyof typeof icons] || icons.default;
}

function getRelativeTime(timestamp: Date) {
  const now = new Date();
  const diff = now.getTime() - timestamp.getTime();
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(diff / 3600000);
  const days = Math.floor(diff / 86400000);
  
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  return `${days}d ago`;
}

function getSourceColor(source: string) {
  const colors = {
    'Business Assessment': '#4f46e5',
    'Contact Form': '#059669',
    'Pricing Calculator': '#dc2626',
    'FAQ Interactions': '#7c3aed',
    'Testimonial Views': '#ea580c',
    'Direct Website': '#0891b2'
  };
  return colors[source as keyof typeof colors] || '#6b7280';
}
---

<div class={`kps-admin-dashboard ${className}`} data-dashboard-id={dashboardId}>
  <!-- Dashboard Header -->
  <div class="dashboard-header">
    <div class="header-left">
      <h1 class="dashboard-title">
        <i class="fas fa-tachometer-alt"></i>
        KPS Group CRM Dashboard
      </h1>
      <p class="dashboard-subtitle">
        Administrative Control Center
      </p>
    </div>
    
    <div class="header-right">
      <div class="user-profile">
        <img src={user?.avatar || '/team/karson/CEO-Karson.png.jpg'} alt={user?.name || 'Admin'} class="user-avatar">
        <div class="user-details">
          <span class="user-name">{user?.name || 'Karson Petersen'}</span>
          <span class="user-role">{user?.role || 'Chief Executive Officer'}</span>
          <span class="user-email">{user?.email || 'karson@thekpsgroup.com'}</span>
        </div>
        <div class="user-actions">
          <button class="btn-notifications" id="notificationsBtn">
            <i class="fas fa-bell"></i>
            <span class="notification-badge">3</span>
          </button>
          <button class="btn-settings" id="settingsBtn">
            <i class="fas fa-cog"></i>
          </button>
          <button class="btn-logout" id="logoutBtn">
            <i class="fas fa-sign-out-alt"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick Stats Overview -->
  <div class="stats-overview">
    <div class="stat-card leads">
      <div class="stat-icon">
        <i class="fas fa-users"></i>
      </div>
      <div class="stat-content">
        <h3>Total Leads</h3>
        <div class="stat-value" id="totalLeadsCount">{analyticsData.overview.totalLeads}</div>
        <div class="stat-change positive">+{analyticsData.overview.monthlyGrowth}% this month</div>
      </div>
    </div>

    <div class="stat-card revenue">
      <div class="stat-icon">
        <i class="fas fa-dollar-sign"></i>
      </div>
      <div class="stat-content">
        <h3>Total Revenue</h3>
        <div class="stat-value" id="revenueCount">${(analyticsData.overview.totalRevenue / 1000).toFixed(0)}K</div>
        <div class="stat-change positive">+8% this month</div>
      </div>
    </div>

    <div class="stat-card conversions">
      <div class="stat-icon">
        <i class="fas fa-handshake"></i>
      </div>
      <div class="stat-content">
        <h3>Conversions</h3>
        <div class="stat-value" id="conversionsCount">{analyticsData.overview.totalConversions}</div>
        <div class="stat-change neutral">{analyticsData.overview.conversionRate}% conversion rate</div>
      </div>
    </div>

    <div class="stat-card clients">
      <div class="stat-icon">
        <i class="fas fa-user-check"></i>
      </div>
      <div class="stat-content">
        <h3>Active Clients</h3>
        <div class="stat-value" id="activeClientsCount">{analyticsData.overview.activeClients}</div>
        <div class="stat-change positive">+5 this week</div>
      </div>
    </div>
  </div>

  <!-- Navigation Tabs -->
  <div class="dashboard-navigation">
    <div class="nav-tabs">
      <button class="nav-tab active" data-tab="overview">
        <i class="fas fa-chart-line"></i>
        Overview
      </button>
      <button class="nav-tab" data-tab="leads">
        <i class="fas fa-user-plus"></i>
        Leads
      </button>
      <button class="nav-tab" data-tab="deals">
        <i class="fas fa-handshake"></i>
        Deals
      </button>
      <button class="nav-tab" data-tab="analytics">
        <i class="fas fa-chart-pie"></i>
        Analytics
      </button>
      <button class="nav-tab" data-tab="automation">
        <i class="fas fa-robot"></i>
        Automation
      </button>
      <button class="nav-tab" data-tab="settings">
        <i class="fas fa-cog"></i>
        Settings
      </button>
    </div>
  </div>

  <!-- Main Dashboard Content -->
  <div class="dashboard-content">
    <!-- Tab Content: Overview -->
    <div class="tab-content active" id="overview-tab">
      <div class="dashboard-grid">
        <!-- Recent Activity Feed -->
        <div class="widget recent-activity">
          <div class="widget-header">
            <h3>Recent Activity</h3>
            <button class="btn-refresh" id="refreshActivity">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
          <div class="activity-feed" id="activityFeed">
            {analyticsData.recentActivity.map(activity => (
              <div class="activity-item">
                <div class="activity-icon" data-type={activity.type}>
                  <i class={getActivityIcon(activity.type)}></i>
                </div>
                <div class="activity-content">
                  <div class="activity-text">
                    <strong>{activity.user}</strong> at {activity.company}
                  </div>
                  <div class="activity-meta">
                    <span class="activity-value">{activity.value}</span>
                    <span class="activity-location">{activity.location}</span>
                    <span class="activity-time">{getRelativeTime(activity.timestamp)}</span>
                  </div>
                  <div class="activity-score">
                    Score: <span class="score-value">{activity.score}</span>/100
                  </div>
                </div>
                <div class="activity-actions">
                  <button class="btn-action" data-action="view" data-id={activity.id}>
                    <i class="fas fa-eye"></i>
                  </button>
                  <button class="btn-action" data-action="contact" data-id={activity.id}>
                    <i class="fas fa-phone"></i>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Lead Sources Performance -->
        <div class="widget lead-sources">
          <div class="widget-header">
            <h3>Lead Sources Performance</h3>
            <button class="btn-export" id="exportLeads">
              <i class="fas fa-download"></i>
              Export
            </button>
          </div>
          <div class="lead-sources-table">
            <table>
              <thead>
                <tr>
                  <th>Source</th>
                  <th>Leads</th>
                  <th>Conversions</th>
                  <th>Rate</th>
                  <th>Revenue</th>
                </tr>
              </thead>
              <tbody>
                {analyticsData.leadSources.map(source => (
                  <tr>
                    <td class="source-name">
                      <div class="source-indicator" style={`background: ${getSourceColor(source.source)}`}></div>
                      {source.source}
                    </td>
                    <td class="leads-count">{source.leads}</td>
                    <td class="conversions-count">{source.conversions}</td>
                    <td class="conversion-rate">
                      <div class="rate-bar">
                        <div class="rate-fill" style={`width: ${source.rate}%`}></div>
                      </div>
                      {source.rate}%
                    </td>
                    <td class="revenue-amount">${source.revenue.toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Geographic Performance -->
        <div class="widget geographic-performance">
          <div class="widget-header">
            <h3>Geographic Performance</h3>
            <select class="location-filter" id="locationFilter">
              <option value="all">All Locations</option>
              <option value="texas">Texas</option>
              <option value="high-opportunity">High Opportunity</option>
            </select>
          </div>
          <div class="city-performance-grid">
            {analyticsData.cityPerformance.map(city => (
              <div class="city-card" data-opportunity={city.opportunity}>
                <div class="city-header">
                  <h4>{city.city}, {city.state}</h4>
                  <span class="opportunity-badge">{city.opportunity}</span>
                </div>
                <div class="city-metrics">
                  <div class="metric">
                    <span class="metric-value">{city.leads}</span>
                    <span class="metric-label">Leads</span>
                  </div>
                  <div class="metric">
                    <span class="metric-value">{city.conversions}</span>
                    <span class="metric-label">Conversions</span>
                  </div>
                  <div class="metric">
                    <span class="metric-value">${(city.revenue / 1000).toFixed(0)}K</span>
                    <span class="metric-label">Revenue</span>
                  </div>
                </div>
                <div class="city-conversion-rate">
                  {((city.conversions / city.leads) * 100).toFixed(1)}% conversion rate
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="widget quick-actions">
          <div class="widget-header">
            <h3>Quick Actions</h3>
          </div>
          <div class="action-grid">
            <button class="action-btn" id="addLeadBtn">
              <i class="fas fa-user-plus"></i>
              <span>Add Lead</span>
            </button>
            <button class="action-btn" id="createDealBtn">
              <i class="fas fa-handshake"></i>
              <span>Create Deal</span>
            </button>
            <button class="action-btn" id="sendEmailBtn">
              <i class="fas fa-envelope"></i>
              <span>Send Email</span>
            </button>
            <button class="action-btn" id="scheduleCallBtn">
              <i class="fas fa-phone"></i>
              <span>Schedule Call</span>
            </button>
            <button class="action-btn" id="viewReportsBtn">
              <i class="fas fa-chart-bar"></i>
              <span>View Reports</span>
            </button>
            <button class="action-btn" id="manageTeamBtn">
              <i class="fas fa-users-cog"></i>
              <span>Manage Team</span>
            </button>
          </div>
        </div>

        <!-- Service Performance -->
        <div class="widget service-performance">
          <div class="widget-header">
            <h3>Service Performance</h3>
            <select class="service-filter" id="serviceFilter">
              <option value="all">All Services</option>
              <option value="quickbooks">QuickBooks</option>
              <option value="bookkeeping">Bookkeeping</option>
              <option value="consulting">Consulting</option>
            </select>
          </div>
          <div class="service-performance-chart">
            {analyticsData.servicePerformance.map(service => (
              <div class="service-row">
                <div class="service-info">
                  <div class="service-name">{service.service}</div>
                  <div class="service-stats">
                    {service.inquiries} inquiries • {service.conversions} conversions
                  </div>
                </div>
                <div class="service-metrics">
                  <div class="conversion-rate">
                    <div class="rate-circle" style={`--rate: ${(service.rate / 100) * 360}deg`}>
                      <span>{service.rate}%</span>
                    </div>
                  </div>
                  <div class="avg-price">
                    <span class="price-value">${service.avgPrice.toLocaleString()}</span>
                    <span class="price-label">Avg Price</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Task Management -->
        <div class="widget task-management">
          <div class="widget-header">
            <h3>Today's Tasks</h3>
            <button class="btn-add-task" id="addTaskBtn">
              <i class="fas fa-plus"></i>
              Add Task
            </button>
          </div>
          <div class="task-list" id="taskList">
            <div class="task-item high-priority">
              <input type="checkbox" class="task-checkbox" id="task-1">
              <label for="task-1" class="task-content">
                <span class="task-title">Follow up with ABC Manufacturing</span>
                <span class="task-time">Due: 2:00 PM</span>
              </label>
              <span class="task-priority high">High</span>
            </div>
            <div class="task-item medium-priority">
              <input type="checkbox" class="task-checkbox" id="task-2">
              <label for="task-2" class="task-content">
                <span class="task-title">Prepare proposal for XYZ Corp</span>
                <span class="task-time">Due: 4:00 PM</span>
              </label>
              <span class="task-priority medium">Medium</span>
            </div>
            <div class="task-item low-priority completed">
              <input type="checkbox" class="task-checkbox" id="task-3" checked>
              <label for="task-3" class="task-content">
                <span class="task-title">Update CRM database</span>
                <span class="task-time">Completed</span>
              </label>
              <span class="task-priority low">Low</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Content: Leads -->
    <div class="tab-content" id="leads-tab">
      <div class="leads-management">
        <div class="leads-toolbar">
          <div class="toolbar-left">
            <h3>Lead Management</h3>
            <span class="lead-count">{analyticsData.overview.totalLeads} total leads</span>
          </div>
          <div class="toolbar-right">
            <input type="search" placeholder="Search leads..." class="search-input" id="leadSearch">
            <select class="filter-select" id="leadStatusFilter">
              <option value="all">All Status</option>
              <option value="new">New</option>
              <option value="contacted">Contacted</option>
              <option value="qualified">Qualified</option>
              <option value="converted">Converted</option>
            </select>
            <button class="btn-primary" id="addNewLead">
              <i class="fas fa-plus"></i>
              Add Lead
            </button>
          </div>
        </div>
        
        <div class="leads-table">
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Company</th>
                <th>Location</th>
                <th>Source</th>
                <th>Score</th>
                <th>Status</th>
                <th>Value</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="leadsTableBody">
              <!-- Lead data will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Tab Content: Deals -->
    <div class="tab-content" id="deals-tab">
      <div class="deals-management">
        <div class="pipeline-overview">
          <div class="pipeline-stage">
            <div class="stage-header">
              <h4>Qualification</h4>
              <span class="stage-count">12</span>
            </div>
            <div class="stage-value">$125,000</div>
            <div class="stage-deals">
              <!-- Deal cards will be populated here -->
            </div>
          </div>
          
          <div class="pipeline-stage">
            <div class="stage-header">
              <h4>Proposal</h4>
              <span class="stage-count">8</span>
            </div>
            <div class="stage-value">$95,500</div>
            <div class="stage-deals">
              <!-- Deal cards will be populated here -->
            </div>
          </div>
          
          <div class="pipeline-stage">
            <div class="stage-header">
              <h4>Negotiation</h4>
              <span class="stage-count">5</span>
            </div>
            <div class="stage-value">$78,000</div>
            <div class="stage-deals">
              <!-- Deal cards will be populated here -->
            </div>
          </div>
          
          <div class="pipeline-stage">
            <div class="stage-header">
              <h4>Closing</h4>
              <span class="stage-count">3</span>
            </div>
            <div class="stage-value">$42,000</div>
            <div class="stage-deals">
              <!-- Deal cards will be populated here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Content: Analytics -->
    <div class="tab-content" id="analytics-tab">
      <div class="analytics-dashboard">
        <div class="chart-container">
          <div class="chart-header">
            <h3>Performance Trends</h3>
            <div class="chart-controls">
              <button class="chart-btn active" data-chart="revenue">Revenue</button>
              <button class="chart-btn" data-chart="leads">Leads</button>
              <button class="chart-btn" data-chart="conversions">Conversions</button>
            </div>
          </div>
          <canvas id="performanceChart" width="800" height="400"></canvas>
        </div>
      </div>
    </div>

    <!-- Tab Content: Automation -->
    <div class="tab-content" id="automation-tab">
      <div class="automation-dashboard">
        <div class="automation-status">
          <h3>Email Automation Status</h3>
          <div class="automation-stats">
            <div class="automation-stat">
              <i class="fas fa-envelope"></i>
              <span class="stat-number">1,247</span>
              <span class="stat-label">Emails Sent</span>
            </div>
            <div class="automation-stat">
              <i class="fas fa-eye"></i>
              <span class="stat-number">892</span>
              <span class="stat-label">Opens</span>
            </div>
            <div class="automation-stat">
              <i class="fas fa-mouse-pointer"></i>
              <span class="stat-number">234</span>
              <span class="stat-label">Clicks</span>
            </div>
          </div>
        </div>
        
        <div class="email-sequences">
          <h3>Active Email Sequences</h3>
          <div class="sequence-list">
            <div class="sequence-item">
              <div class="sequence-info">
                <h4>Welcome Series</h4>
                <p>5-email onboarding sequence</p>
              </div>
              <div class="sequence-stats">
                <span>142 subscribers</span>
                <span>28% open rate</span>
              </div>
            </div>
            
            <div class="sequence-item">
              <div class="sequence-info">
                <h4>Follow-up Sequence</h4>
                <p>3-email nurturing sequence</p>
              </div>
              <div class="sequence-stats">
                <span>89 subscribers</span>
                <span>34% open rate</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Content: Settings -->
    <div class="tab-content" id="settings-tab">
      <div class="settings-dashboard">
        <div class="settings-section">
          <h3>CRM Settings</h3>
          <div class="setting-item">
            <label for="autoAssign">Auto-assign leads</label>
            <input type="checkbox" id="autoAssign" checked>
          </div>
          <div class="setting-item">
            <label for="emailNotifications">Email notifications</label>
            <input type="checkbox" id="emailNotifications" checked>
          </div>
          <div class="setting-item">
            <label for="leadScoring">Enable lead scoring</label>
            <input type="checkbox" id="leadScoring" checked>
          </div>
        </div>
        
        <div class="settings-section">
          <h3>User Management</h3>
          <div class="user-list">
            <div class="user-item">
              <img src="/team/karson/CEO-Karson.png.jpg" alt="Karson" class="user-avatar-small">
              <div class="user-info">
                <span class="user-name">Karson Petersen</span>
                <span class="user-role">CEO</span>
              </div>
              <span class="user-status active">Active</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Notifications Panel (Hidden by default) -->
  <div class="notifications-panel" id="notificationsPanel" style="display: none;">
    <div class="panel-header">
      <h3>Notifications</h3>
      <button class="panel-close" id="closeNotifications">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="panel-content">
      <div class="notification-item unread">
        <div class="notification-icon">
          <i class="fas fa-user-plus"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">New lead assigned</div>
          <div class="notification-text">Sarah Johnson from ABC Manufacturing</div>
          <div class="notification-time">5 minutes ago</div>
        </div>
      </div>
      
      <div class="notification-item unread">
        <div class="notification-icon">
          <i class="fas fa-envelope"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">Email campaign completed</div>
          <div class="notification-text">Welcome series finished for 15 contacts</div>
          <div class="notification-time">1 hour ago</div>
        </div>
      </div>
      
      <div class="notification-item">
        <div class="notification-icon">
          <i class="fas fa-handshake"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">Deal closed successfully</div>
          <div class="notification-text">XYZ Corp - $25,000 implementation</div>
          <div class="notification-time">2 hours ago</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .kps-admin-dashboard {
    min-height: 100vh;
    background: #f8fafc;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    position: relative;
  }

  /* Dashboard Header */
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem;
    background: white;
    border-bottom: 1px solid #e2e8f0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-left h1 {
    margin: 0 0 0.5rem 0;
    color: #1e293b;
    font-size: 2rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dashboard-subtitle {
    margin: 0;
    color: #64748b;
    font-size: 1rem;
  }

  .user-profile {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .user-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #D4AF37;
  }

  .user-details {
    display: flex;
    flex-direction: column;
  }

  .user-name {
    font-weight: 600;
    color: #1e293b;
    font-size: 1rem;
  }

  .user-role {
    color: #64748b;
    font-size: 0.875rem;
  }

  .user-email {
    color: #9ca3af;
    font-size: 0.75rem;
  }

  .user-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn-notifications,
  .btn-settings,
  .btn-logout {
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 8px;
    background: #f1f5f9;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    position: relative;
    color: #64748b;
  }

  .btn-notifications:hover,
  .btn-settings:hover,
  .btn-logout:hover {
    background: #e2e8f0;
    color: #1e293b;
  }

  .notification-badge {
    position: absolute;
    top: -4px;
    right: -4px;
    background: #ef4444;
    color: white;
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.375rem;
    border-radius: 10px;
    min-width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Stats Overview */
  .stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    padding: 2rem;
    background: #f8fafc;
  }

  .stat-card {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 1.5rem;
    transition: transform 0.2s ease;
    border-left: 4px solid transparent;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .stat-card.leads {
    border-left-color: #3b82f6;
  }

  .stat-card.revenue {
    border-left-color: #10b981;
  }

  .stat-card.conversions {
    border-left-color: #f59e0b;
  }

  .stat-card.clients {
    border-left-color: #8b5cf6;
  }

  .stat-icon {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    border-radius: 12px;
    color: white;
  }

  .stat-card.leads .stat-icon { background: #3b82f6; }
  .stat-card.revenue .stat-icon { background: #10b981; }
  .stat-card.conversions .stat-icon { background: #f59e0b; }
  .stat-card.clients .stat-icon { background: #8b5cf6; }

  .stat-content h3 {
    margin: 0 0 0.5rem 0;
    color: #64748b;
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .stat-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.5rem;
    line-height: 1;
  }

  .stat-change {
    font-size: 0.875rem;
    font-weight: 600;
  }

  .stat-change.positive { color: #16a34a; }
  .stat-change.negative { color: #dc2626; }
  .stat-change.neutral { color: #6b7280; }

  /* Navigation Tabs */
  .dashboard-navigation {
    padding: 0 2rem;
    background: #f8fafc;
  }

  .nav-tabs {
    display: flex;
    gap: 0.5rem;
    background: white;
    padding: 0.5rem;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow-x: auto;
  }

  .nav-tab {
    padding: 0.75rem 1.5rem;
    border: none;
    background: transparent;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    color: #64748b;
    transition: all 0.2s ease;
    white-space: nowrap;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .nav-tab.active {
    background: #D4AF37;
    color: white;
  }

  .nav-tab:hover:not(.active) {
    background: #f1f5f9;
    color: #374151;
  }

  /* Dashboard Content */
  .dashboard-content {
    padding: 2rem;
    background: #f8fafc;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  /* Dashboard Grid */
  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
  }

  /* Widgets */
  .widget {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .widget-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .widget-header h3 {
    margin: 0;
    color: #1e293b;
    font-size: 1.25rem;
    font-weight: 600;
  }

  /* Recent Activity */
  .activity-feed {
    max-height: 500px;
    overflow-y: auto;
  }

  .activity-item {
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
    display: flex;
    gap: 1rem;
    align-items: flex-start;
    transition: background 0.2s ease;
  }

  .activity-item:hover {
    background: #f8fafc;
  }

  .activity-item:last-child {
    border-bottom: none;
  }

  .activity-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    color: white;
    font-size: 1rem;
  }

  .activity-icon[data-type="new-lead"] { background: #3b82f6; }
  .activity-icon[data-type="deal-won"] { background: #10b981; }
  .activity-icon[data-type="email-opened"] { background: #f59e0b; }
  .activity-icon[data-type="assessment"] { background: #8b5cf6; }

  .activity-content {
    flex: 1;
  }

  .activity-text {
    color: #1e293b;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .activity-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .activity-value {
    color: #10b981;
    font-weight: 600;
  }

  .activity-location {
    color: #6b7280;
  }

  .activity-time {
    color: #9ca3af;
  }

  .activity-score {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .score-value {
    color: #10b981;
    font-weight: 600;
  }

  .activity-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn-action {
    width: 32px;
    height: 32px;
    border: none;
    border-radius: 6px;
    background: #f1f5f9;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    color: #64748b;
  }

  .btn-action:hover {
    background: #e2e8f0;
    color: #1e293b;
  }

  /* Lead Sources Table */
  .lead-sources-table {
    padding: 1.5rem;
    overflow-x: auto;
  }

  .lead-sources-table table {
    width: 100%;
    border-collapse: collapse;
  }

  .lead-sources-table th {
    color: #6b7280;
    font-weight: 600;
    text-align: left;
    padding: 0.75rem 0;
    border-bottom: 1px solid #e5e7eb;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .lead-sources-table td {
    padding: 1rem 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .source-name {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 500;
  }

  .source-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .rate-bar {
    width: 80px;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin: 0.25rem 0;
  }

  .rate-fill {
    height: 100%;
    background: #10b981;
    border-radius: 4px;
    transition: width 0.3s ease;
  }

  /* Geographic Performance */
  .city-performance-grid {
    padding: 1.5rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .city-card {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.2s ease;
  }

  .city-card:hover {
    border-color: #D4AF37;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .city-card[data-opportunity="high"] {
    border-left: 4px solid #10b981;
  }

  .city-card[data-opportunity="medium"] {
    border-left: 4px solid #f59e0b;
  }

  .city-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .city-header h4 {
    margin: 0;
    color: #1e293b;
    font-size: 1rem;
  }

  .opportunity-badge {
    background: #e5e7eb;
    color: #6b7280;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .city-card[data-opportunity="high"] .opportunity-badge {
    background: #dcfce7;
    color: #16a34a;
  }

  .city-card[data-opportunity="medium"] .opportunity-badge {
    background: #fef3c7;
    color: #d97706;
  }

  .city-metrics {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .metric {
    text-align: center;
  }

  .metric-value {
    display: block;
    font-size: 1.25rem;
    font-weight: 700;
    color: #1e293b;
  }

  .metric-label {
    font-size: 0.75rem;
    color: #6b7280;
    text-transform: uppercase;
    font-weight: 500;
  }

  .city-conversion-rate {
    text-align: center;
    color: #10b981;
    font-weight: 600;
    font-size: 0.9rem;
  }

  /* Quick Actions */
  .action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    padding: 1.5rem;
  }

  .action-btn {
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
  }

  .action-btn:hover {
    border-color: #D4AF37;
    background: rgba(212, 175, 55, 0.05);
    transform: translateY(-1px);
  }

  .action-btn i {
    font-size: 1.5rem;
    color: #6b7280;
  }

  /* Service Performance */
  .service-performance-chart {
    padding: 1.5rem;
  }

  .service-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .service-row:last-child {
    border-bottom: none;
  }

  .service-name {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .service-stats {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .service-metrics {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .rate-circle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: conic-gradient(#10b981 0deg, #10b981 var(--rate, 0deg), #e5e7eb var(--rate, 0deg));
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .rate-circle::before {
    content: '';
    position: absolute;
    width: 40px;
    height: 40px;
    background: white;
    border-radius: 50%;
  }

  .rate-circle span {
    position: relative;
    z-index: 1;
    font-weight: 700;
    color: #1e293b;
    font-size: 0.875rem;
  }

  .avg-price {
    text-align: center;
  }

  .price-value {
    display: block;
    font-size: 1.1rem;
    font-weight: 700;
    color: #10b981;
  }

  .price-label {
    font-size: 0.8rem;
    color: #6b7280;
  }

  /* Task Management */
  .task-list {
    padding: 1rem 1.5rem 1.5rem 1.5rem;
  }

  .task-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 0;
    border-bottom: 1px solid #f1f5f9;
  }

  .task-item:last-child {
    border-bottom: none;
  }

  .task-item.completed {
    opacity: 0.6;
  }

  .task-item.completed .task-title {
    text-decoration: line-through;
  }

  .task-checkbox {
    width: 18px;
    height: 18px;
    border: 2px solid #d1d5db;
    border-radius: 4px;
    cursor: pointer;
  }

  .task-content {
    flex: 1;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .task-title {
    color: #1e293b;
    font-weight: 500;
  }

  .task-time {
    color: #64748b;
    font-size: 0.75rem;
  }

  .task-priority {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.625rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .task-priority.high {
    background: #fee2e2;
    color: #dc2626;
  }

  .task-priority.medium {
    background: #fef3c7;
    color: #d97706;
  }

  .task-priority.low {
    background: #dcfce7;
    color: #16a34a;
  }

  /* Leads Management */
  .leads-management {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .leads-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .toolbar-left h3 {
    margin: 0 0 0.25rem 0;
    color: #1e293b;
    font-size: 1.25rem;
  }

  .lead-count {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .toolbar-right {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .search-input {
    padding: 0.5rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 0.875rem;
    width: 200px;
  }

  .filter-select {
    padding: 0.5rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 0.875rem;
    background: white;
  }

  .btn-primary {
    background: #D4AF37;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-primary:hover {
    background: #b8941f;
    transform: translateY(-1px);
  }

  /* Pipeline Overview */
  .pipeline-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .pipeline-stage {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #D4AF37;
  }

  .stage-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .stage-header h4 {
    margin: 0;
    color: #1e293b;
    font-size: 1.125rem;
  }

  .stage-count {
    background: #f1f5f9;
    color: #6b7280;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .stage-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #10b981;
    margin-bottom: 1rem;
  }

  /* Chart Container */
  .chart-container {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .chart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .chart-header h3 {
    margin: 0;
    color: #1e293b;
  }

  .chart-controls {
    display: flex;
    gap: 0.5rem;
  }

  .chart-btn {
    padding: 0.375rem 0.75rem;
    border: 1px solid #e5e7eb;
    background: white;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }

  .chart-btn.active {
    background: #D4AF37;
    color: white;
    border-color: #D4AF37;
  }

  /* Automation Dashboard */
  .automation-dashboard {
    display: grid;
    gap: 1.5rem;
  }

  .automation-status {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .automation-status h3 {
    margin: 0 0 1rem 0;
    color: #1e293b;
  }

  .automation-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
  }

  .automation-stat {
    text-align: center;
    padding: 1rem;
    border: 1px solid #f1f5f9;
    border-radius: 8px;
  }

  .automation-stat i {
    font-size: 1.5rem;
    color: #D4AF37;
    margin-bottom: 0.5rem;
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    color: #6b7280;
    font-size: 0.875rem;
  }

  /* Email Sequences */
  .email-sequences {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .email-sequences h3 {
    margin: 0 0 1rem 0;
    color: #1e293b;
  }

  .sequence-list {
    display: grid;
    gap: 1rem;
  }

  .sequence-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border: 1px solid #f1f5f9;
    border-radius: 8px;
  }

  .sequence-info h4 {
    margin: 0 0 0.25rem 0;
    color: #1e293b;
  }

  .sequence-info p {
    margin: 0;
    color: #6b7280;
    font-size: 0.875rem;
  }

  .sequence-stats {
    text-align: right;
    color: #6b7280;
    font-size: 0.875rem;
  }

  /* Settings Dashboard */
  .settings-dashboard {
    display: grid;
    gap: 1.5rem;
  }

  .settings-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .settings-section h3 {
    margin: 0 0 1rem 0;
    color: #1e293b;
  }

  .setting-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid #f1f5f9;
  }

  .setting-item:last-child {
    border-bottom: none;
  }

  .user-list {
    display: grid;
    gap: 0.5rem;
  }

  .user-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    border: 1px solid #f1f5f9;
    border-radius: 8px;
  }

  .user-avatar-small {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }

  .user-info {
    flex: 1;
  }

  .user-status {
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .user-status.active {
    background: #dcfce7;
    color: #16a34a;
  }

  /* Notifications Panel */
  .notifications-panel {
    position: fixed;
    top: 80px;
    right: 2rem;
    width: 350px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    max-height: 500px;
    overflow-y: auto;
  }

  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .panel-header h3 {
    margin: 0;
    color: #1e293b;
    font-size: 1rem;
    font-weight: 600;
  }

  .panel-close {
    background: none;
    border: none;
    font-size: 1.25rem;
    cursor: pointer;
    color: #6b7280;
    padding: 0.25rem;
    border-radius: 4px;
  }

  .panel-close:hover {
    background: #f3f4f6;
  }

  .panel-content {
    padding: 0;
  }

  .notification-item {
    display: flex;
    gap: 1rem;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #f9fafb;
    transition: background 0.2s ease;
  }

  .notification-item:hover {
    background: #f8fafc;
  }

  .notification-item.unread {
    background: #f8fafc;
    border-left: 3px solid #D4AF37;
  }

  .notification-item:last-child {
    border-bottom: none;
  }

  .notification-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f1f5f9;
    color: #6b7280;
    flex-shrink: 0;
  }

  .notification-content {
    flex: 1;
  }

  .notification-title {
    color: #1e293b;
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .notification-text {
    color: #6b7280;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .notification-time {
    color: #9ca3af;
    font-size: 0.75rem;
  }

  /* Button Styles */
  .btn-refresh,
  .btn-export,
  .btn-add-task {
    padding: 0.375rem 0.75rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.75rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #64748b;
    font-weight: 500;
  }

  .btn-refresh:hover,
  .btn-export:hover,
  .btn-add-task:hover {
    background: #e2e8f0;
    color: #374151;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
    }

    .stats-overview {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .kps-admin-dashboard {
      padding: 0;
    }

    .dashboard-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
      padding: 1rem;
    }

    .user-profile {
      justify-content: space-between;
    }

    .stats-overview {
      grid-template-columns: 1fr;
      padding: 1rem;
    }

    .dashboard-content {
      padding: 1rem;
    }

    .nav-tabs {
      justify-content: flex-start;
    }

    .nav-tab {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }

    .city-performance-grid {
      grid-template-columns: 1fr;
    }

    .action-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .pipeline-overview {
      grid-template-columns: 1fr;
    }

    .automation-stats {
      grid-template-columns: 1fr;
    }

    .toolbar-right {
      flex-direction: column;
      gap: 0.5rem;
      align-items: stretch;
    }

    .search-input {
      width: 100%;
    }

    .notifications-panel {
      right: 1rem;
      left: 1rem;
      width: auto;
    }
  }

  /* Loading and Animation States */
  .loading {
    opacity: 0.6;
    pointer-events: none;
    position: relative;
  }

  .loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    border: 2px solid #e2e8f0;
    border-top: 2px solid #D4AF37;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: translate(-50%, -50%) rotate(0deg); }
    to { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Smooth transitions */
  * {
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  /* Focus states for accessibility */
  button:focus,
  input:focus,
  select:focus {
    outline: 2px solid #D4AF37;
    outline-offset: 2px;
  }
</style>

<script is:inline define:vars={{ dashboardId, analyticsData }}>
  window.KPSAdminDashboard = {
    config: {
      dashboardId,
      analyticsData
    },

    init: function() {
      this.container = document.querySelector(`[data-dashboard-id="${this.config.dashboardId}"]`);
      if (!this.container) return;

      this.setupEventListeners();
      this.initializeCharts();
      this.generateHeatmap();
      this.startRealTimeUpdates();
      
      console.log('KPS Admin Dashboard initialized');
    },

    setupEventListeners: function() {
      // Refresh data
      const refreshBtn = this.container.querySelector('[data-refresh-data]');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => this.refreshData());
      }

      // Time range change
      const timeRangeSelect = this.container.querySelector('[data-time-range]');
      if (timeRangeSelect) {
        timeRangeSelect.addEventListener('change', (e) => this.updateTimeRange(e.target.value));
      }

      // Chart type switching
      this.container.querySelectorAll('[data-chart-type]').forEach(btn => {
        btn.addEventListener('click', (e) => this.switchChartType(e.target.dataset.chartType));
      });

      // Activity details
      this.container.querySelectorAll('[data-view-details]').forEach(btn => {
        btn.addEventListener('click', (e) => this.viewActivityDetails(e.target.dataset.viewDetails));
      });

      // Contact lead
      this.container.querySelectorAll('[data-contact-lead]').forEach(btn => {
        btn.addEventListener('click', (e) => this.contactLead(e.target.dataset.contactLead));
      });

      // Quick actions
      this.container.querySelectorAll('[data-action]').forEach(btn => {
        btn.addEventListener('click', (e) => this.executeAction(e.target.dataset.action));
      });

      // Modal controls
      const modalClose = this.container.querySelector('[data-modal-close]');
      if (modalClose) {
        modalClose.addEventListener('click', () => this.closeModal());
      }

      const modalOverlay = this.container.querySelector('[data-modal-overlay]');
      if (modalOverlay) {
        modalOverlay.addEventListener('click', (e) => {
          if (e.target === modalOverlay) this.closeModal();
        });
      }

      // Export functions
      this.container.querySelectorAll('[data-export-leads]').forEach(btn => {
        btn.addEventListener('click', () => this.exportLeads());
      });

      // Load more activity
      const loadMoreBtn = this.container.querySelector('[data-load-more-activity]');
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => this.loadMoreActivity());
      }
    },

    initializeCharts: function() {
      // Initialize trend chart (would use Chart.js or similar in production)
      const chartCanvas = this.container.querySelector('#trendChart');
      if (chartCanvas) {
        this.renderTrendChart(chartCanvas, 'leads');
      }
    },

    renderTrendChart: function(canvas, type) {
      const ctx = canvas.getContext('2d');
      const data = this.config.analyticsData.timeSeriesData;
      
      // Simple chart rendering (in production, use Chart.js)
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.strokeStyle = '#ffd700';
      ctx.lineWidth = 3;
      ctx.beginPath();
      
      const values = data[type] || data.leads;
      const max = Math.max(...values);
      const width = canvas.width;
      const height = canvas.height - 40;
      
      values.forEach((value, index) => {
        const x = (index / (values.length - 1)) * width;
        const y = height - (value / max) * height + 20;
        
        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });
      
      ctx.stroke();
    },

    switchChartType: function(type) {
      // Update active button
      this.container.querySelectorAll('[data-chart-type]').forEach(btn => {
        btn.classList.remove('active');
      });
      this.container.querySelector(`[data-chart-type="${type}"]`).classList.add('active');
      
      // Re-render chart
      const chartCanvas = this.container.querySelector('#trendChart');
      if (chartCanvas) {
        this.renderTrendChart(chartCanvas, type);
      }
    },

    generateHeatmap: function() {
      const heatmapContainer = this.container.querySelector('[data-heatmap]');
      if (!heatmapContainer) return;

      // Generate 7 days x 24 hours heatmap
      const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
      const hours = Array.from({length: 24}, (_, i) => i);

      let heatmapHtml = '';
      
      days.forEach(day => {
        hours.forEach(hour => {
          const activity = Math.random() * 100; // Random data for demo
          const intensity = Math.floor(activity / 25);
          
          heatmapHtml += `
            <div class="heatmap-cell" 
                 style="background: ${this.getHeatmapColor(intensity)}"
                 title="${day} ${hour}:00 - ${activity.toFixed(0)} activities">
            </div>
          `;
        });
      });

      heatmapContainer.innerHTML = heatmapHtml;
    },

    getHeatmapColor: function(intensity) {
      const colors = ['#e5e7eb', '#ffd700', '#f59e0b', '#ef4444'];
      return colors[Math.min(intensity, 3)];
    },

    refreshData: async function() {
      const refreshBtn = this.container.querySelector('[data-refresh-data]');
      refreshBtn.classList.add('loading');
      
      try {
        // Fetch real analytics data from our API
        const response = await fetch('/api/analytics?type=dashboard&timeframe=30d');
        const result = await response.json();
        
        if (result.success) {
          this.updateDashboardData(result.data);
        } else {
          console.error('Failed to fetch analytics data:', result.error);
        }
      } catch (error) {
        console.error('Error fetching analytics data:', error);
      } finally {
        refreshBtn.classList.remove('loading');
        this.updateLastUpdated();
      }
    },

    updateDashboardData: function(data) {
      // Update KPIs
      this.updateKPI('total-leads', data.kpis.totalLeads);
      this.updateKPI('total-conversions', data.kpis.totalConversions);
      this.updateKPI('conversion-rate', data.kpis.conversionRate + '%');
      this.updateKPI('total-revenue', '$' + (data.kpis.totalRevenue / 1000).toFixed(0) + 'K');
      this.updateKPI('avg-lead-value', '$' + data.kpis.avgLeadValue.toLocaleString());
      this.updateKPI('total-pageviews', data.kpis.totalPageViews.toLocaleString());

      // Update lead sources table
      this.updateLeadSourcesTable(data.leadSources);
      
      // Update geographic performance
      this.updateGeoPerformance(data.geoPerformance);
      
      // Update service performance
      this.updateServicePerformance(data.servicePerformance);
      
      // Update activity feed
      this.updateActivityFeed(data.recentActivity);
    },

    updateKPI: function(selector, value) {
      const element = this.container.querySelector(`[data-kpi="${selector}"]`);
      if (element) {
        element.textContent = value;
      }
    },

    updateLeadSourcesTable: function(leadSources) {
      const tbody = this.container.querySelector('.lead-sources-table tbody');
      if (!tbody) return;

      tbody.innerHTML = leadSources.map(source => `
        <tr>
          <td>${source.name}</td>
          <td>${source.leads}</td>
          <td>${source.conversions}</td>
          <td>${((source.conversions / source.leads) * 100).toFixed(1)}%</td>
          <td>$${source.revenue.toLocaleString()}</td>
        </tr>
      `).join('');
    },

    updateGeoPerformance: function(geoData) {
      const container = this.container.querySelector('.geo-performance-grid');
      if (!container) return;

      container.innerHTML = geoData.map(geo => `
        <div class="geo-card">
          <h4>${geo.city}</h4>
          <div class="geo-stats">
            <div>Leads: ${geo.leads}</div>
            <div>Conversions: ${geo.conversions}</div>
            <div>Rate: ${geo.conversionRate.toFixed(1)}%</div>
            <div>Revenue: $${geo.revenue.toLocaleString()}</div>
          </div>
        </div>
      `).join('');
    },

    updateServicePerformance: function(serviceData) {
      const container = this.container.querySelector('.service-performance-grid');
      if (!container) return;

      container.innerHTML = serviceData.map(service => `
        <div class="service-card">
          <h4>${service.name}</h4>
          <div class="service-stats">
            <div>Leads: ${service.leads}</div>
            <div>Conversions: ${service.conversions}</div>
            <div>Rate: ${service.conversionRate.toFixed(1)}%</div>
            <div>Revenue: $${service.revenue.toLocaleString()}</div>
          </div>
        </div>
      `).join('');
    },

    updateActivityFeed: function(activities) {
      const container = this.container.querySelector('.activity-feed-list');
      if (!container) return;

      container.innerHTML = activities.map(activity => `
        <div class="activity-item">
          <div class="activity-content">
            <div class="activity-description">${activity.description}</div>
            <div class="activity-meta">
              <span class="activity-time">${this.getRelativeTime(new Date(activity.timestamp))}</span>
              ${activity.city ? `<span class="activity-city">${activity.city}</span>` : ''}
              ${activity.value > 0 ? `<span class="activity-value">$${activity.value.toLocaleString()}</span>` : ''}
            </div>
          </div>
          <div class="activity-status ${activity.status || 'default'}">${activity.status || 'info'}</div>
        </div>
      `).join('');
    },

    updateTimeRange: function(range) {
      console.log('Updating time range to:', range);
      // In production, this would fetch new data based on the time range
      this.refreshData();
    },

    updateLastUpdated: function() {
      const lastUpdatedEl = this.container.querySelector('[data-last-updated]');
      if (lastUpdatedEl) {
        lastUpdatedEl.textContent = new Date().toLocaleString();
      }
    },

    updateKPIs: function() {
      // Simulate slight variations in KPI values
      const kpiValues = this.container.querySelectorAll('.kpi-value');
      kpiValues.forEach(el => {
        const currentValue = parseInt(el.textContent.replace(/[^0-9]/g, ''));
        const variation = Math.floor(Math.random() * 10) - 5; // -5 to +5
        const newValue = Math.max(0, currentValue + variation);
        
        if (el.textContent.includes('K')) {
          el.textContent = `$${newValue}K`;
        } else {
          el.textContent = newValue.toLocaleString();
        }
      });
    },

    viewActivityDetails: function(activityId) {
      const activity = this.config.analyticsData.recentActivity.find(a => a.id == activityId);
      if (!activity) return;

      const modalTitle = this.container.querySelector('[data-modal-title]');
      const modalBody = this.container.querySelector('[data-modal-body]');
      
      modalTitle.textContent = `Activity Details - ${activity.user}`;
      modalBody.innerHTML = `
        <div class="activity-details-modal">
          <h4>${activity.company}</h4>
          <p><strong>Location:</strong> ${activity.location}</p>
          <p><strong>Activity:</strong> ${activity.type.replace('_', ' ')}</p>
          <p><strong>Value:</strong> ${activity.value}</p>
          <p><strong>Lead Score:</strong> ${activity.score}/100</p>
          <p><strong>Timestamp:</strong> ${activity.timestamp.toLocaleString()}</p>
          
          <div class="action-buttons">
            <button class="btn btn-primary">Contact Lead</button>
            <button class="btn btn-secondary">Add to CRM</button>
            <button class="btn btn-outline">View Full Profile</button>
          </div>
        </div>
      `;
      
      this.openModal();
    },

    contactLead: function(activityId) {
      const activity = this.config.analyticsData.recentActivity.find(a => a.id == activityId);
      if (!activity) return;

      alert(`Initiating contact with ${activity.user} at ${activity.company}`);
      // In production, this would open a contact form or CRM integration
    },

    executeAction: function(action) {
      console.log('Executing action:', action);
      
      switch(action) {
        case 'export-leads':
          this.exportLeads();
          break;
        case 'send-follow-up':
          this.sendFollowUps();
          break;
        case 'generate-report':
          this.generateReport();
          break;
        case 'update-pricing':
          this.updatePricing();
          break;
        case 'manage-cities':
          this.manageCities();
          break;
        case 'system-health':
          this.checkSystemHealth();
          break;
        default:
          alert(`Action "${action}" not implemented yet`);
      }
    },

    exportLeads: function() {
      const csvData = this.generateLeadsCSV();
      this.downloadCSV(csvData, 'leads_export.csv');
    },

    generateLeadsCSV: function() {
      const headers = ['Source', 'Leads', 'Conversions', 'Rate', 'Revenue'];
      const rows = this.config.analyticsData.leadSources.map(source => [
        source.source,
        source.leads,
        source.conversions,
        `${source.rate}%`,
        `$${source.revenue}`
      ]);
      
      return [headers, ...rows].map(row => row.join(',')).join('\n');
    },

    downloadCSV: function(content, filename) {
      const blob = new Blob([content], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
    },

    sendFollowUps: function() {
      alert('Follow-up emails will be sent to high-value leads');
      // In production, integrate with email service
    },

    generateReport: function() {
      alert('Generating comprehensive analytics report...');
      // In production, generate PDF report
    },

    updatePricing: function() {
      alert('Opening pricing management interface...');
      // In production, open pricing editor
    },

    manageCities: function() {
      alert('Opening city management interface...');
      // In production, open city data editor
    },

    checkSystemHealth: function() {
      alert('System health: All services operational ✅');
      // In production, show system status dashboard
    },

    loadMoreActivity: function() {
      // Simulate loading more activity data
      const loadMoreBtn = this.container.querySelector('[data-load-more-activity]');
      loadMoreBtn.classList.add('loading');
      
      setTimeout(() => {
        loadMoreBtn.classList.remove('loading');
        alert('More activity data loaded');
      }, 1000);
    },

    openModal: function() {
      const modal = this.container.querySelector('[data-modal-overlay]');
      if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      }
    },

    closeModal: function() {
      const modal = this.container.querySelector('[data-modal-overlay]');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';
      }
    },

    startRealTimeUpdates: function() {
      // Update timestamps every minute
      setInterval(() => {
        this.updateRelativeTimes();
      }, 60000);

      // Simulate new activity every 30 seconds
      setInterval(() => {
        this.simulateNewActivity();
      }, 30000);
    },

    updateRelativeTimes: function() {
      this.container.querySelectorAll('.activity-time').forEach(el => {
        // Update relative time display
        const timestamp = new Date(el.dataset.timestamp);
        el.textContent = this.getRelativeTime(timestamp);
      });
    },

    simulateNewActivity: function() {
      // Add visual indicator for new activity
      const activityFeed = this.container.querySelector('.activity-feed');
      if (activityFeed) {
        const indicator = document.createElement('div');
        indicator.className = 'new-activity-indicator';
        indicator.textContent = '• New activity available';
        indicator.style.cssText = `
          padding: 0.5rem 1.5rem;
          background: #ffd700;
          color: #1e3a8a;
          font-weight: 600;
          text-align: center;
          cursor: pointer;
        `;
        
        activityFeed.insertBefore(indicator, activityFeed.firstChild);
        
        indicator.addEventListener('click', () => {
          indicator.remove();
          this.refreshData();
        });
      }
    },

    getRelativeTime: function(timestamp) {
      const now = new Date();
      const diff = now - timestamp;
      const minutes = Math.floor(diff / (1000 * 60));
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));

      if (minutes < 1) return 'Just now';
      if (minutes < 60) return `${minutes}m ago`;
      if (hours < 24) return `${hours}h ago`;
      return `${days}d ago`;
    }
  };

  // Helper functions for template
<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log('KPS Admin Dashboard initialized');
    
    // State management
    const dashboardState = {
      currentView: 'overview',
      lastRefresh: new Date(),
      notifications: [],
      filters: {
        timeRange: '7d',
        location: 'all',
        service: 'all'
      },
      user: {
        id: 'admin-1',
        name: 'Admin User',
        role: 'Administrator',
        avatar: '/public/team/default-avatar.jpg',
        email: 'admin@kpsgroup.com'
      }
    };

    // Initialize dashboard
    initializeDashboard();
    initializeTabNavigation();
    initializeNotifications();
    initializeUserInteractions();
    initializeDataRefresh();
    initializeAnalytics();

    function initializeDashboard() {
      console.log('Initializing dashboard components...');
      
      // Update last refresh time
      updateLastRefreshTime();
      
      // Initialize charts and data visualizations
      initializeCharts();
      
      // Setup real-time updates
      setupRealTimeUpdates();
      
      // Load user preferences
      loadUserPreferences();
    }

    function initializeTabNavigation() {
      const navTabs = document.querySelectorAll('.nav-tab');
      const tabContents = document.querySelectorAll('.tab-content');

      navTabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
          e.preventDefault();
          
          const targetTab = this.getAttribute('data-tab');
          
          // Remove active class from all tabs and contents
          navTabs.forEach(t => t.classList.remove('active'));
          tabContents.forEach(content => content.classList.remove('active'));
          
          // Add active class to clicked tab and corresponding content
          this.classList.add('active');
          const targetContent = document.querySelector(`[data-tab-content="${targetTab}"]`);
          if (targetContent) {
            targetContent.classList.add('active');
            dashboardState.currentView = targetTab;
            
            // Track navigation
            trackUserAction('tab_navigation', { tab: targetTab });
            
            // Load tab-specific data
            loadTabData(targetTab);
          }
        });
      });
    }

    function initializeNotifications() {
      const notificationBtn = document.querySelector('.btn-notifications');
      const notificationPanel = document.querySelector('.notifications-panel');
      
      if (notificationBtn && notificationPanel) {
        notificationBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const isVisible = notificationPanel.style.display === 'block';
          notificationPanel.style.display = isVisible ? 'none' : 'block';
          
          if (!isVisible) {
            loadNotifications();
          }
        });

        // Close panel when clicking outside
        document.addEventListener('click', function(e) {
          if (!notificationPanel.contains(e.target) && !notificationBtn.contains(e.target)) {
            notificationPanel.style.display = 'none';
          }
        });

        // Close panel button
        const closeBtn = notificationPanel.querySelector('.panel-close');
        if (closeBtn) {
          closeBtn.addEventListener('click', function() {
            notificationPanel.style.display = 'none';
          });
        }
      }

      // Update notification badge
      updateNotificationBadge();
    }

    function initializeUserInteractions() {
      // Task completion
      const taskCheckboxes = document.querySelectorAll('.task-checkbox');
      taskCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('click', function() {
          const taskItem = this.closest('.task-item');
          taskItem.classList.toggle('completed');
          
          // Update task status
          const taskId = taskItem.getAttribute('data-task-id');
          updateTaskStatus(taskId, taskItem.classList.contains('completed'));
        });
      });

      // Lead management
      const leadActions = document.querySelectorAll('.btn-action');
      leadActions.forEach(action => {
        action.addEventListener('click', function() {
          const actionType = this.getAttribute('data-action');
          const leadId = this.closest('.activity-item').getAttribute('data-lead-id');
          handleLeadAction(actionType, leadId);
        });
      });

      // Quick actions
      const quickActions = document.querySelectorAll('.action-btn');
      quickActions.forEach(action => {
        action.addEventListener('click', function() {
          const actionType = this.getAttribute('data-action');
          handleQuickAction(actionType);
        });
      });

      // Filter controls
      const filterInputs = document.querySelectorAll('.time-range-select, .filter-select');
      filterInputs.forEach(input => {
        input.addEventListener('change', function() {
          updateDashboardFilters();
        });
      });

      // Search functionality
      const searchInput = document.querySelector('.search-input');
      if (searchInput) {
        searchInput.addEventListener('input', debounce(function() {
          performSearch(this.value);
        }, 300));
      }
    }

    function initializeDataRefresh() {
      const refreshBtn = document.querySelector('.btn-refresh');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
          this.classList.add('loading');
          refreshDashboardData().finally(() => {
            this.classList.remove('loading');
          });
        });
      }

      // Auto-refresh every 5 minutes
      setInterval(() => {
        refreshDashboardData();
      }, 5 * 60 * 1000);
    }

    function initializeAnalytics() {
      // Track page view
      trackUserAction('dashboard_view', {
        timestamp: new Date().toISOString(),
        user_role: dashboardState.user.role
      });

      // Track time spent on dashboard
      let startTime = Date.now();
      window.addEventListener('beforeunload', function() {
        const timeSpent = Date.now() - startTime;
        trackUserAction('dashboard_time_spent', {
          duration: timeSpent,
          view: dashboardState.currentView
        });
      });
    }

    function initializeCharts() {
      // Performance trend chart
      const trendChartContainer = document.querySelector('.trend-chart');
      if (trendChartContainer) {
        renderTrendChart(trendChartContainer);
      }

      // Geographic performance charts
      const geoChartContainers = document.querySelectorAll('.city-card');
      geoChartContainers.forEach(container => {
        const cityData = JSON.parse(container.getAttribute('data-city-data') || '{}');
        renderCityChart(container, cityData);
      });

      // Service performance circles
      const serviceCircles = document.querySelectorAll('.rate-circle');
      serviceCircles.forEach(circle => {
        const rate = parseFloat(circle.getAttribute('data-rate') || '0');
        animateCircleChart(circle, rate);
      });
    }

    function loadTabData(tabName) {
      console.log(`Loading data for tab: ${tabName}`);
      
      switch(tabName) {
        case 'leads':
          loadLeadsData();
          break;
        case 'deals':
          loadDealsData();
          break;
        case 'analytics':
          loadAnalyticsData();
          break;
        case 'automation':
          loadAutomationData();
          break;
        case 'settings':
          loadSettingsData();
          break;
        default:
          loadOverviewData();
      }
    }

    function loadOverviewData() {
      // Simulate API call for overview data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateOverviewStats();
          updateRecentActivity();
          updateQuickStats();
          resolve();
        }, 500);
      });
    }

    function loadLeadsData() {
      // Simulate API call for leads data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateLeadsTable();
          updateLeadFilters();
          resolve();
        }, 500);
      });
    }

    function loadDealsData() {
      // Simulate API call for deals data
      return new Promise((resolve) => {
        setTimeout(() => {
          updatePipelineView();
          updateDealMetrics();
          resolve();
        }, 500);
      });
    }

    function loadAnalyticsData() {
      // Simulate API call for analytics data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateAnalyticsCharts();
          updateConversionMetrics();
          resolve();
        }, 500);
      });
    }

    function loadAutomationData() {
      // Simulate API call for automation data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateAutomationStatus();
          updateEmailSequences();
          resolve();
        }, 500);
      });
    }

    function loadSettingsData() {
      // Load settings data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateUserManagement();
          updateSystemSettings();
          resolve();
        }, 500);
      });
    }

    function refreshDashboardData() {
      console.log('Refreshing dashboard data...');
      
      return Promise.all([
        fetchLatestStats(),
        fetchRecentActivity(),
        fetchNotifications(),
        fetchLocationPerformance(),
        fetchServiceMetrics()
      ]).then(() => {
        dashboardState.lastRefresh = new Date();
        updateLastRefreshTime();
        showRefreshNotification();
      }).catch(error => {
        console.error('Error refreshing dashboard:', error);
        showErrorNotification('Failed to refresh dashboard data');
      });
    }

    function fetchLatestStats() {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          // Update KPI cards with new data
          updateKPICards({
            leads: { value: 47, change: '+12%', trend: 'up' },
            revenue: { value: '$125,450', change: '+8.5%', trend: 'up' },
            conversions: { value: '18%', change: '+2.3%', trend: 'up' },
            clients: { value: 156, change: '+5', trend: 'up' }
          });
          resolve();
        }, 1000);
      });
    }

    function fetchRecentActivity() {
      // Simulate API call for recent activity
      return new Promise((resolve) => {
        setTimeout(() => {
          const activities = generateMockActivity();
          updateActivityFeed(activities);
          resolve();
        }, 800);
      });
    }

    function fetchNotifications() {
      // Simulate API call for notifications
      return new Promise((resolve) => {
        setTimeout(() => {
          const notifications = generateMockNotifications();
          updateNotifications(notifications);
          resolve();
        }, 600);
      });
    }

    function fetchLocationPerformance() {
      // Simulate API call for location data
      return new Promise((resolve) => {
        setTimeout(() => {
          updateLocationPerformance();
          resolve();
        }, 1200);
      });
    }

    function fetchServiceMetrics() {
      // Simulate API call for service metrics
      return new Promise((resolve) => {
        setTimeout(() => {
          updateServiceMetrics();
          resolve();
        }, 1000);
      });
    }

    function updateKPICards(stats) {
      Object.keys(stats).forEach(key => {
        const card = document.querySelector(`.stat-card.${key}`);
        if (card) {
          const valueEl = card.querySelector('.stat-value');
          const changeEl = card.querySelector('.stat-change');
          
          if (valueEl) valueEl.textContent = stats[key].value;
          if (changeEl) {
            changeEl.textContent = stats[key].change;
            changeEl.className = `stat-change ${stats[key].trend === 'up' ? 'positive' : 'negative'}`;
          }
        }
      });
    }

    function updateActivityFeed(activities) {
      const feedContainer = document.querySelector('.activity-feed');
      if (!feedContainer) return;

      const activityHTML = activities.map(activity => `
        <div class="activity-item" data-lead-id="${activity.id}" data-activity-type="${activity.type}">
          <div class="activity-icon" data-type="${activity.type}">
            <i class="fas ${getActivityIcon(activity.type)}"></i>
          </div>
          <div class="activity-content">
            <div class="activity-text">${activity.description}</div>
            <div class="activity-meta">
              ${activity.value ? `<span class="activity-value">${activity.value}</span>` : ''}
              <span class="activity-location">${activity.location}</span>
              <span class="activity-time">${formatTimeAgo(activity.timestamp)}</span>
            </div>
            ${activity.score ? `<div class="activity-score">Lead Score: <span class="score-value">${activity.score}/100</span></div>` : ''}
          </div>
          <div class="activity-actions">
            <button class="btn-action" data-action="view" title="View Details">
              <i class="fas fa-eye"></i>
            </button>
            <button class="btn-action" data-action="contact" title="Contact Lead">
              <i class="fas fa-phone"></i>
            </button>
            <button class="btn-action" data-action="assign" title="Assign">
              <i class="fas fa-user-plus"></i>
            </button>
          </div>
        </div>
      `).join('');

      feedContainer.innerHTML = activityHTML;
    }

    function updateNotifications(notifications) {
      dashboardState.notifications = notifications;
      updateNotificationBadge();
      updateNotificationPanel();
    }

    function updateNotificationBadge() {
      const badge = document.querySelector('.notification-badge');
      const unreadCount = dashboardState.notifications.filter(n => !n.read).length;
      
      if (badge) {
        badge.textContent = unreadCount;
        badge.style.display = unreadCount > 0 ? 'flex' : 'none';
      }
    }

    function updateNotificationPanel() {
      const panel = document.querySelector('.notifications-panel .panel-content');
      if (!panel) return;

      const notificationsHTML = dashboardState.notifications.map(notification => `
        <div class="notification-item ${!notification.read ? 'unread' : ''}" data-notification-id="${notification.id}">
          <div class="notification-icon">
            <i class="fas ${getNotificationIcon(notification.type)}"></i>
          </div>
          <div class="notification-content">
            <div class="notification-title">${notification.title}</div>
            <div class="notification-text">${notification.message}</div>
            <div class="notification-time">${formatTimeAgo(notification.timestamp)}</div>
          </div>
        </div>
      `).join('');

      panel.innerHTML = notificationsHTML;
    }

    function updateLocationPerformance() {
      const locationCards = document.querySelectorAll('.city-card');
      locationCards.forEach(card => {
        // Simulate updated performance data
        const metrics = card.querySelectorAll('.metric-value');
        metrics.forEach(metric => {
          const currentValue = parseInt(metric.textContent);
          const variation = Math.floor(Math.random() * 10) - 5; // -5 to +5
          metric.textContent = Math.max(0, currentValue + variation);
        });
      });
    }

    function updateServiceMetrics() {
      const serviceRows = document.querySelectorAll('.service-row');
      serviceRows.forEach(row => {
        const circle = row.querySelector('.rate-circle');
        const currentRate = parseFloat(circle.getAttribute('data-rate') || '0');
        const newRate = Math.min(100, Math.max(0, currentRate + (Math.random() * 10 - 5)));
        
        circle.setAttribute('data-rate', newRate.toFixed(1));
        animateCircleChart(circle, newRate);
      });
    }

    function handleLeadAction(actionType, leadId) {
      console.log(`Handling lead action: ${actionType} for lead: ${leadId}`);
      
      switch(actionType) {
        case 'view':
          openLeadDetails(leadId);
          break;
        case 'contact':
          initiateContact(leadId);
          break;
        case 'assign':
          showAssignmentModal(leadId);
          break;
        default:
          console.log('Unknown action type:', actionType);
      }

      trackUserAction('lead_action', { action: actionType, lead_id: leadId });
    }

    function handleQuickAction(actionType) {
      console.log(`Handling quick action: ${actionType}`);
      
      switch(actionType) {
        case 'new-lead':
          window.location.href = '/crm?action=new-lead';
          break;
        case 'send-email':
          openEmailComposer();
          break;
        case 'schedule-meeting':
          openCalendarScheduler();
          break;
        case 'generate-report':
          generateReport();
          break;
        case 'bulk-import':
          openBulkImportModal();
          break;
        case 'export-data':
          exportDashboardData();
          break;
        default:
          console.log('Unknown quick action:', actionType);
      }

      trackUserAction('quick_action', { action: actionType });
    }

    function updateTaskStatus(taskId, completed) {
      console.log(`Updating task ${taskId} status to: ${completed ? 'completed' : 'pending'}`);
      
      // Simulate API call
      setTimeout(() => {
        showSuccessNotification(`Task ${completed ? 'completed' : 'reopened'} successfully`);
      }, 500);

      trackUserAction('task_update', { task_id: taskId, completed: completed });
    }

    function updateDashboardFilters() {
      const timeRange = document.querySelector('.time-range-select')?.value;
      const location = document.querySelector('.filter-select')?.value;
      
      if (timeRange) dashboardState.filters.timeRange = timeRange;
      if (location) dashboardState.filters.location = location;
      
      console.log('Updating filters:', dashboardState.filters);
      
      // Apply filters to dashboard data
      applyFilters();
      
      trackUserAction('filter_change', dashboardState.filters);
    }

    function performSearch(query) {
      console.log('Performing search:', query);
      
      if (query.length < 2) {
        clearSearchResults();
        return;
      }

      // Simulate search API call
      setTimeout(() => {
        const results = simulateSearchResults(query);
        displaySearchResults(results);
      }, 300);

      trackUserAction('search', { query: query });
    }

    function applyFilters() {
      const { timeRange, location, service } = dashboardState.filters;
      
      // Apply filters to all data displays
      filterActivityFeed(timeRange, location);
      filterLocationCards(location);
      filterServiceMetrics(service);
      
      // Update URL with filter parameters
      const url = new URL(window.location);
      url.searchParams.set('timeRange', timeRange);
      url.searchParams.set('location', location);
      url.searchParams.set('service', service);
      window.history.replaceState({}, '', url);
    }

    function filterActivityFeed(timeRange, location) {
      const activities = document.querySelectorAll('.activity-item');
      activities.forEach(activity => {
        const activityLocation = activity.querySelector('.activity-location')?.textContent || '';
        const visible = location === 'all' || activityLocation.includes(location);
        activity.style.display = visible ? 'flex' : 'none';
      });
    }

    function filterLocationCards(location) {
      const cards = document.querySelectorAll('.city-card');
      cards.forEach(card => {
        const cardLocation = card.querySelector('h4')?.textContent || '';
        const visible = location === 'all' || cardLocation.includes(location);
        card.style.display = visible ? 'block' : 'none';
      });
    }

    function filterServiceMetrics(service) {
      const rows = document.querySelectorAll('.service-row');
      rows.forEach(row => {
        const serviceName = row.querySelector('.service-name')?.textContent || '';
        const visible = service === 'all' || serviceName.toLowerCase().includes(service.toLowerCase());
        row.style.display = visible ? 'flex' : 'none';
      });
    }

    function renderTrendChart(container) {
      // Simplified chart rendering using CSS
      const chartData = generateChartData();
      const chartHTML = `
        <div class="simple-chart">
          ${chartData.map((value, index) => `
            <div class="chart-bar" style="height: ${value}%; --delay: ${index * 0.1}s"></div>
          `).join('')}
        </div>
      `;
      container.innerHTML = chartHTML;
    }

    function renderCityChart(container, cityData) {
      // Add mini performance indicators
      const performance = cityData.conversionRate || Math.random() * 25 + 5;
      const indicator = container.querySelector('.city-conversion-rate');
      if (indicator) {
        indicator.textContent = `${performance.toFixed(1)}% conversion rate`;
      }
    }

    function animateCircleChart(circle, rate) {
      const degrees = (rate / 100) * 360;
      circle.style.setProperty('--rate', `${degrees}deg`);
      
      const span = circle.querySelector('span');
      if (span) {
        span.textContent = `${rate.toFixed(0)}%`;
      }
    }

    function generateMockActivity() {
      const activities = [
        {
          id: 'lead-001',
          type: 'new-lead',
          description: 'New lead from website contact form',
          location: 'Dallas, TX',
          value: null,
          score: 85,
          timestamp: new Date(Date.now() - Math.random() * 3600000)
        },
        {
          id: 'deal-002',
          type: 'deal-won',
          description: 'HVAC consultation deal closed',
          location: 'Austin, TX',
          value: '$4,500',
          score: null,
          timestamp: new Date(Date.now() - Math.random() * 7200000)
        },
        {
          id: 'email-003',
          type: 'email-opened',
          description: 'Monthly newsletter opened',
          location: 'Houston, TX',
          value: null,
          score: null,
          timestamp: new Date(Date.now() - Math.random() * 1800000)
        },
        {
          id: 'assessment-004',
          type: 'assessment',
          description: 'Business assessment completed',
          location: 'San Antonio, TX',
          value: '$12,000 potential',
          score: 92,
          timestamp: new Date(Date.now() - Math.random() * 5400000)
        }
      ];
      
      return activities.sort((a, b) => b.timestamp - a.timestamp);
    }

    function generateMockNotifications() {
      return [
        {
          id: 'notif-001',
          type: 'lead',
          title: 'New High-Value Lead',
          message: 'A new lead from Dallas with a score of 95 requires immediate attention.',
          timestamp: new Date(Date.now() - 300000),
          read: false
        },
        {
          id: 'notif-002',
          type: 'deal',
          title: 'Deal Update',
          message: 'HVAC consultation in Austin moved to final approval stage.',
          timestamp: new Date(Date.now() - 900000),
          read: false
        },
        {
          id: 'notif-003',
          type: 'system',
          title: 'Monthly Report Ready',
          message: 'Your November performance report is now available for download.',
          timestamp: new Date(Date.now() - 1800000),
          read: true
        }
      ];
    }

    function generateChartData() {
      return Array.from({ length: 12 }, () => Math.random() * 80 + 20);
    }

    function getActivityIcon(type) {
      const icons = {
        'new-lead': 'fa-user-plus',
        'deal-won': 'fa-handshake',
        'email-opened': 'fa-envelope-open',
        'assessment': 'fa-clipboard-check'
      };
      return icons[type] || 'fa-circle';
    }

    function getNotificationIcon(type) {
      const icons = {
        'lead': 'fa-user',
        'deal': 'fa-handshake',
        'system': 'fa-cog',
        'email': 'fa-envelope'
      };
      return icons[type] || 'fa-bell';
    }

    function formatTimeAgo(timestamp) {
      const now = new Date();
      const diff = now - new Date(timestamp);
      const minutes = Math.floor(diff / 60000);
      
      if (minutes < 1) return 'Just now';
      if (minutes < 60) return `${minutes}m ago`;
      
      const hours = Math.floor(minutes / 60);
      if (hours < 24) return `${hours}h ago`;
      
      const days = Math.floor(hours / 24);
      return `${days}d ago`;
    }

    function updateLastRefreshTime() {
      const timeElement = document.querySelector('.last-updated');
      if (timeElement) {
        timeElement.textContent = `Last updated: ${formatTimeAgo(dashboardState.lastRefresh)}`;
      }
    }

    function showSuccessNotification(message) {
      showNotification(message, 'success');
    }

    function showErrorNotification(message) {
      showNotification(message, 'error');
    }

    function showRefreshNotification() {
      showNotification('Dashboard data refreshed successfully', 'success');
    }

    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `toast-notification toast-${type}`;
      notification.innerHTML = `
        <div class="toast-content">
          <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
          <span>${message}</span>
        </div>
        <button class="toast-close">
          <i class="fas fa-times"></i>
        </button>
      `;

      // Add to page
      document.body.appendChild(notification);

      // Position notification
      const existingNotifications = document.querySelectorAll('.toast-notification');
      const topOffset = (existingNotifications.length - 1) * 80 + 20;
      notification.style.top = `${topOffset}px`;

      // Auto-remove after 5 seconds
      setTimeout(() => {
        notification.remove();
      }, 5000);

      // Remove on click
      notification.querySelector('.toast-close').addEventListener('click', () => {
        notification.remove();
      });
    }

    function trackUserAction(action, data = {}) {
      console.log('Tracking user action:', action, data);
      
      // In a real application, this would send data to analytics service
      const eventData = {
        action: action,
        timestamp: new Date().toISOString(),
        user_id: dashboardState.user.id,
        session_id: sessionStorage.getItem('session_id') || 'unknown',
        ...data
      };

      // Store in local analytics queue
      const analyticsQueue = JSON.parse(localStorage.getItem('analytics_queue') || '[]');
      analyticsQueue.push(eventData);
      localStorage.setItem('analytics_queue', JSON.stringify(analyticsQueue));
    }

    function setupRealTimeUpdates() {
      // Simulate real-time updates
      setInterval(() => {
        updateRealTimeMetrics();
      }, 30000); // Update every 30 seconds
    }

    function updateRealTimeMetrics() {
      // Simulate real-time metric updates
      const metrics = document.querySelectorAll('.stat-value');
      metrics.forEach(metric => {
        const current = metric.textContent;
        if (current.includes('$')) {
          // Revenue metric
          const value = parseInt(current.replace(/[$,]/g, ''));
          const newValue = value + Math.floor(Math.random() * 1000);
          metric.textContent = `$${newValue.toLocaleString()}`;
        } else if (current.includes('%')) {
          // Percentage metric
          const value = parseFloat(current.replace('%', ''));
          const newValue = Math.max(0, Math.min(100, value + (Math.random() * 2 - 1)));
          metric.textContent = `${newValue.toFixed(1)}%`;
        } else if (!isNaN(parseInt(current))) {
          // Number metric
          const value = parseInt(current);
          const newValue = Math.max(0, value + Math.floor(Math.random() * 3 - 1));
          metric.textContent = newValue.toString();
        }
      });
    }

    function loadUserPreferences() {
      const preferences = JSON.parse(localStorage.getItem('dashboard_preferences') || '{}');
      
      // Apply saved preferences
      if (preferences.timeRange) {
        const timeRangeSelect = document.querySelector('.time-range-select');
        if (timeRangeSelect) timeRangeSelect.value = preferences.timeRange;
        dashboardState.filters.timeRange = preferences.timeRange;
      }

      if (preferences.defaultTab) {
        const targetTab = document.querySelector(`[data-tab="${preferences.defaultTab}"]`);
        if (targetTab) targetTab.click();
      }
    }

    function saveUserPreferences() {
      const preferences = {
        timeRange: dashboardState.filters.timeRange,
        defaultTab: dashboardState.currentView,
        lastVisit: new Date().toISOString()
      };
      
      localStorage.setItem('dashboard_preferences', JSON.stringify(preferences));
    }

    // Utility functions
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    function throttle(func, limit) {
      let inThrottle;
      return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      }
    }

    // Save preferences before page unload
    window.addEventListener('beforeunload', saveUserPreferences);

    // Handle logout
    const logoutBtn = document.querySelector('.btn-logout');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to log out?')) {
          sessionStorage.clear();
          localStorage.removeItem('auth_token');
          window.location.href = '/crm-logout';
        }
      });
    }

    console.log('KPS Admin Dashboard fully initialized');
  });
</script>
