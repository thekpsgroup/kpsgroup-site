---
// Enhanced Accessibility Component for improved UX and WCAG compliance
const { skipToContent = true, reducedMotion = true, highContrast = false } = Astro.props;
---

<!-- Skip to Main Content for Screen Readers -->
{skipToContent && (
  <a 
    href="#main-content" 
    class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:bg-gold focus:text-black focus:px-4 focus:py-2 focus:rounded-lg focus:font-semibold"
  >
    Skip to main content
  </a>
)}

<!-- Enhanced Focus Management -->
<div class="focus-manager" data-focus-manager>
  <div class="focus-outline" aria-hidden="true"></div>
</div>

<!-- Accessibility Toolbar (Optional) -->
{highContrast && (
  <div class="accessibility-toolbar fixed top-20 right-4 z-40 bg-gray-900/95 backdrop-blur-md rounded-lg p-3 border border-gray-700">
    <div class="flex flex-col space-y-2">
      <button 
        class="accessibility-toggle text-xs text-white hover:text-gold transition-colors"
        data-toggle="high-contrast"
        aria-label="Toggle high contrast mode"
      >
        üîÜ High Contrast
      </button>
      <button 
        class="accessibility-toggle text-xs text-white hover:text-gold transition-colors"
        data-toggle="large-text"
        aria-label="Increase text size"
      >
        üîç Large Text
      </button>
      <button 
        class="accessibility-toggle text-xs text-white hover:text-gold transition-colors"
        data-toggle="reduced-motion"
        aria-label="Reduce motion and animations"
      >
        ‚è∏Ô∏è Reduce Motion
      </button>
    </div>
  </div>
)}

<!-- Live Region for Dynamic Content -->
<div 
  id="live-region" 
  aria-live="polite" 
  aria-atomic="true" 
  class="sr-only"
  data-live-region
></div>

<script>
  class AccessibilityManager {
    constructor() {
      this.focusManager = document.querySelector('[data-focus-manager]');
      this.liveRegion = document.querySelector('[data-live-region]');
      this.init();
    }

    init() {
      this.setupFocusManagement();
      this.setupAccessibilityToggles();
      this.setupKeyboardNavigation();
      this.setupReducedMotion();
    }

    setupFocusManagement() {
      let focusOutline = document.querySelector('.focus-outline');
      if (!focusOutline) return;

      // Enhanced focus visibility
      document.addEventListener('focusin', (e) => {
        const target = e.target;
        if (target.matches('button, a, input, textarea, select, [tabindex]')) {
          this.showFocusOutline(target);
        }
      });

      document.addEventListener('focusout', () => {
        this.hideFocusOutline();
      });

      // Keyboard-only focus (not mouse)
      document.addEventListener('mousedown', () => {
        document.body.classList.add('mouse-user');
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          document.body.classList.remove('mouse-user');
        }
      });
    }

    showFocusOutline(element) {
      const rect = element.getBoundingClientRect();
      const outline = document.querySelector('.focus-outline');
      if (!outline) return;

      outline.style.display = 'block';
      outline.style.left = `${rect.left - 4}px`;
      outline.style.top = `${rect.top - 4}px`;
      outline.style.width = `${rect.width + 8}px`;
      outline.style.height = `${rect.height + 8}px`;
    }

    hideFocusOutline() {
      const outline = document.querySelector('.focus-outline');
      if (outline) {
        outline.style.display = 'none';
      }
    }

    setupAccessibilityToggles() {
      // High contrast toggle
      const highContrastToggle = document.querySelector('[data-toggle="high-contrast"]');
      if (highContrastToggle) {
        highContrastToggle.addEventListener('click', () => {
          document.body.classList.toggle('high-contrast');
          this.announceChange('High contrast mode toggled');
        });
      }

      // Large text toggle
      const largeTextToggle = document.querySelector('[data-toggle="large-text"]');
      if (largeTextToggle) {
        largeTextToggle.addEventListener('click', () => {
          document.body.classList.toggle('large-text');
          this.announceChange('Text size toggled');
        });
      }

      // Reduced motion toggle
      const reducedMotionToggle = document.querySelector('[data-toggle="reduced-motion"]');
      if (reducedMotionToggle) {
        reducedMotionToggle.addEventListener('click', () => {
          document.body.classList.toggle('reduced-motion-override');
          this.announceChange('Animation settings changed');
        });
      }
    }

    setupKeyboardNavigation() {
      // Enhanced keyboard navigation
      document.addEventListener('keydown', (e) => {
        // Escape key handling
        if (e.key === 'Escape') {
          this.handleEscapeKey();
        }

        // Arrow key navigation for grids/lists
        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
          this.handleArrowNavigation(e);
        }

        // Enter/Space for button activation
        if ((e.key === 'Enter' || e.key === ' ') && e.target.matches('[role="button"]')) {
          e.preventDefault();
          e.target.click();
        }
      });
    }

    setupReducedMotion() {
      // Respect user's reduced motion preference
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
      
      if (prefersReducedMotion.matches) {
        document.body.classList.add('reduced-motion');
      }

      prefersReducedMotion.addEventListener('change', (e) => {
        if (e.matches) {
          document.body.classList.add('reduced-motion');
        } else {
          document.body.classList.remove('reduced-motion');
        }
      });
    }

    handleEscapeKey() {
      // Close modals, dropdowns, etc.
      const openModal = document.querySelector('.modal[style*="block"], .modal.open');
      if (openModal) {
        const closeBtn = openModal.querySelector('[data-modal-close], .modal-close');
        if (closeBtn) closeBtn.click();
      }

      // Close mobile menu
      const mobileMenu = document.querySelector('.mobile-menu.open');
      if (mobileMenu) {
        const closeBtn = mobileMenu.querySelector('[data-menu-close]');
        if (closeBtn) closeBtn.click();
      }
    }

    handleArrowNavigation(e) {
      const currentElement = e.target;
      const container = currentElement.closest('[role="grid"], [role="listbox"], .navigation-grid');
      
      if (!container) return;

      const focusableElements = container.querySelectorAll('[tabindex="0"], button, a, input');
      const currentIndex = Array.from(focusableElements).indexOf(currentElement);
      
      let nextIndex;
      
      switch (e.key) {
        case 'ArrowUp':
          nextIndex = currentIndex - 1;
          break;
        case 'ArrowDown':
          nextIndex = currentIndex + 1;
          break;
        case 'ArrowLeft':
          nextIndex = currentIndex - 1;
          break;
        case 'ArrowRight':
          nextIndex = currentIndex + 1;
          break;
      }

      if (nextIndex >= 0 && nextIndex < focusableElements.length) {
        e.preventDefault();
        focusableElements[nextIndex].focus();
      }
    }

    announceChange(message) {
      if (this.liveRegion) {
        this.liveRegion.textContent = message;
        // Clear after announcement
        setTimeout(() => {
          this.liveRegion.textContent = '';
        }, 1000);
      }
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new AccessibilityManager());
  } else {
    new AccessibilityManager();
  }
</script>

<style>
  /* Enhanced Focus Outline */
  .focus-outline {
    position: fixed;
    z-index: 9999;
    display: none;
    border: 3px solid #f8d673;
    border-radius: 6px;
    box-shadow: 0 0 0 2px rgba(248, 214, 115, 0.3);
    pointer-events: none;
    transition: all 0.15s ease;
  }

  /* High Contrast Mode */
  .high-contrast {
    filter: contrast(150%) brightness(110%);
  }

  .high-contrast .glass-card,
  .high-contrast .glass-effect {
    background: rgba(255, 255, 255, 0.15) !important;
    border: 2px solid rgba(255, 255, 255, 0.3) !important;
  }

  /* Large Text Mode */
  .large-text {
    font-size: 1.125em !important;
  }

  .large-text h1 { font-size: 1.2em !important; }
  .large-text h2 { font-size: 1.15em !important; }
  .large-text h3 { font-size: 1.1em !important; }

  /* Reduced Motion Override */
  .reduced-motion-override *,
  .reduced-motion * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }

  /* Mouse users - hide focus outlines except for keyboard users */
  .mouse-user *:focus {
    outline: none !important;
  }

  .mouse-user .focus-outline {
    display: none !important;
  }

  /* Accessibility Toolbar */
  .accessibility-toolbar {
    transform: translateX(100%);
    transition: transform 0.3s ease;
  }

  .accessibility-toolbar:hover,
  .accessibility-toolbar:focus-within {
    transform: translateX(0);
  }

  /* Enhanced Button States */
  .accessibility-toggle {
    min-height: 44px;
    min-width: 44px;
    padding: 8px 12px;
    border-radius: 6px;
    border: 1px solid transparent;
  }

  .accessibility-toggle:focus {
    outline: 2px solid #f8d673;
    outline-offset: 2px;
    border-color: #f8d673;
  }

  /* Screen Reader Improvements */
  .sr-only {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
  }

  .focus\:not-sr-only:focus {
    position: static !important;
    width: auto !important;
    height: auto !important;
    padding: inherit !important;
    margin: inherit !important;
    overflow: visible !important;
    clip: auto !important;
    white-space: normal !important;
  }
</style>
